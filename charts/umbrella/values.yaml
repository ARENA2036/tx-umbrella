# #############################################################################
# Copyright (c) 2023,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
portal:
  enabled: true
  replicaCount: 1
  postgresql:
    postgresql:
    nameOverride: "portal-backend-postgresql"
    architecture: standalone

centralidp:
  enabled: true
  keycloak:
    nameOverride: "centralidp"
    replicaCount: 1
    initContainers:
      - name: import
        image: docker.io/tractusx/umbrella-init-container:0.0.1-init
        imagePullPolicy: Always
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying realms..."
            cp -R /import/catenax-central/realms/* /realms
        volumeMounts:
        - name: realms
          mountPath: "/realms"
    postgresql:
      nameOverride: "centralidp-postgresql"
      architecture: standalone

sharedidp:
  enabled: true
  keycloak:
    nameOverride: "sharedidp"
    replicaCount: 1
    initContainers:
      - name: import
        image: docker.io/tractusx/umbrella-init-container:0.0.1-init
        imagePullPolicy: Always
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying realms..."
            cp -R /import/catenax-shared/realms/* /realms
        volumeMounts:
        - name: realms
          mountPath: "/realms"
    postgresql:
      nameOverride: "sharedidp-postgresql"
      architecture: standalone

bpndiscovery:
  enabled: true
  enablePostgres: true
  bpndiscovery:
    authentication: false
    bpndiscoverEndpoint:
      allowedTypes: oen,wmi,passtype,manufacturerPartId
      description: Service to discover BPN for different kind of type numbers
      endpointAddress: /bpndiscovery
      documentation: /bpndiscovery/swagger-ui/index.html
      timeToLive: "31536000"
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "bpndiscovery-postgresql"

discoveryfinder:
  enabled: true
  enablePostgres: true
  discoveryfinder:
    authentication: false
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "discoveryfinder-postgresql"

sdfactory:
  enabled: true
  secret:
    # -- JWK Set URI
    jwkSetUri: "https://centralidp.example.org/auth/realms/CX-Central/protocol/openid-connect/certs"
    # -- Custodian wallet client id
    clientId: ""
    # -- Custodian wallet client secret
    clientSecret: ""
    # -- Keycloak URL
    authServerUrl: "https://centralidp.example.org/auth"
    # -- Keycloak Realm detail
    realm: ""
    # -- Keycloak Resource detail
    resource: ""
    # -- Details for Custodian wallet URI
    custodianWalletUri: ""
    # -- Details for Clearing House URI
    clearingHouseUri: ""
    # -- Details for Clearing House URL
    clearingHouseServerUrl: ""
    # -- Details for Clearing House Realm
    clearingHouseRealm: ""
    # -- Details for Clearing House Client ID
    clearingHouseClientId: ""
    # -- Details for Clearing House Client Secret
    clearingHouseClientSecret: ""

managed-identity-wallet:
  nameOverride: miw
  fullnameOverride: miw
  enabled: true
  miw:
    authorityWallet:
      bpn: &authority-bpn "BPNL000000000000"
    database:
      host: "{{ .Release.Name }}-miw-postgres"
      secret: "{{ .Release.Name }}-miw-postgres"
    keycloak:
      url: "https://{{ .Release.Name }}-centralidp"
      clientId: &miw_client CHANGEME  # TODO switch to existing user
  postgresql:
    nameOverride: miw-postgres
    primary:
      persistence:
        enabled: false
        size: 1Gi
  keycloak:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 90
  readinessProbe:
    initialDelaySeconds: 90

dataconsumer:
  enabled: true
  seedTestdata: false
  nameOverride: dataconsumer
  secrets:
    edc-miw-keycloak-secret: changeme  # TODO switch to existing user
  tractusx-connector:
    nameOverride: dataconsumer-edc
    participant:
      id: BPNL000000000000
    controlplane:
      ssi:
        miw:
          url: http://miw:8080
          authorityId: *authority-bpn
        oauth:
          tokenurl: http://lab-centralidp/auth/realms/CX-Central/protocol/openid-connect/token
          client:
            id: *miw_client
            secretAlias: edc-miw-keycloak-secret
      endpoints:
        management:
          authKey: TEST1
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      nameOverride: dataconsumer-db
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-dataconsumer-db:5432/edc"
    vault:
      hashicorp:
        url: http://edc-dataconsumer-vault:8200
      secretNames:
        transferProxyTokenSignerPrivateKey: tokenSignerPrivateKey
        transferProxyTokenSignerPublicKey: tokenSignerPublicKey
        transferProxyTokenEncryptionAesKey: tokenEncryptionAesKey

  vault:
    nameOverride: edc-dataconsumer-vault
    fullnameOverride: edc-dataconsumer-vault
    enabled: true
    server:
      postStart: []

  digital-twin-registry:
    enabled: false

  simple-data-backend:
    enabled: false

dataprovider:
  # TODO enable once resource availability is clarified
  enabled: false
  seedTestdata: true
  backendUrl: http://{{ .Release.Name }}-dataprovider-submodelserver:8080
  registryUrl: http://{{ .Release.Name }}-dataprovider-dtr:8080/api/v3.0
  controlplanePublicUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8084
  controlplaneManagementUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8081
  dataplaneUrl: http://{{ .Release.Name }}-dataprovider-edc-dataplane:8081
  nameOverride: dataprovider
  secrets:
    edc-miw-keycloak-secret: changeme  # TODO switch to existing user
  tractusx-connector:
    nameOverride: dataprovider-edc
    participant:
      id: BPNL000000000000
    controlplane:
      ssi:
        miw:
          url: http://miw:8080
          authorityId: *authority-bpn
        oauth:
          tokenurl: http://lab-centralidp/auth/realms/CX-Central/protocol/openid-connect/token
          client:
            id: *miw_client
            secretAlias: edc-miw-keycloak-secret
      endpoints:
        management:
          authKey: TEST2
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      nameOverride: dataprovider-db
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-dataprovider-db:5432/edc"
    vault:
      hashicorp:
        url: http://edc-dataprovider-vault:8200
      secretNames:
        transferProxyTokenSignerPrivateKey: tokenSignerPrivateKey
        transferProxyTokenSignerPublicKey: tokenSignerPublicKey
        transferProxyTokenEncryptionAesKey: tokenEncryptionAesKey

  vault:
    nameOverride: edc-dataprovider-vault
    fullnameOverride: edc-dataprovider-vault
    enabled: true
    server:
      postStart: []

  digital-twin-registry:
    nameOverride: dataprovider-dtr
    postgresql:
      nameOverride: dataprovider-dtr-db
      auth:
        existingSecret: dataprovider-secret-dtr-postgres-init
    registry:
      host: dataprovider-dtr.test

  simple-data-backend:
    nameOverride: dataprovider-submodelserver
    ingress:
      enabled: false
