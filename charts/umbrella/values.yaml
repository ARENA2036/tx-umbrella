# #############################################################################
# Copyright (c) 2023,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
## TODO: update edc to R23.12 and adjust values
# edcconsumer:
#   nameOverride: edcconsumer
#   install:
#     daps: true
#     postgresql: true
#     vault: true
#   backendService:
#     # TODO: what is the correct value here?
#     httpProxyTokenReceiverUrl: "http://localhost"
#   controlplane:
#     endpoints:
#       management:
#         authKey: consumer-authkey
#     image:
#       repository: *edcCpImage
#       tag: *edcImageTag
#   daps:
#     clientId: *edcConsumerDapsClientId
#     daps:
#       secret:
#         clientId: *dapsClientId
#         clientSecret: *dapsClientSecret
#     image:
#       repository: ghcr.io/fraunhofer-aisec/omejdn-server
#     # podSecurityContext:
#     #   fsGroup: 1000
#     #   runAsNonRoot: true
#     #   runAsUser: 1000
#     #   runAsGroup: 1000
#     # persistence:
#     #   accessMode: "ReadWriteOnce"
#   dataplane:
#     image:
#       repository: *edcDpImage
#       tag: *edcImageTag
#   networkPolicy:
#     enabled: *netPolEnabled
#   participant:
#     id: consumer
#   postgresql:
#     nameOverride: consumer-postgresql
#     networkPolicy:
#       enabled: *netPolEnabled
#       ingressRules:
#         primaryAccessOnlyFrom:
#           enabled: true
#           podSelector:
#             app.kubernetes.io/name: edcconsumer-controlplane
#             app.kubernetes.io/instance: '{{ .Release.Name }}-controlplane'
#     jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-consumer-postgresql:5432/edc"
#     auth:
#       username: psql-consumer-user
#       password: psql-consumer-password
#   vault:
#     hashicorp:
#       token: *edcVaultToken
#     server:
#       dev:
#         devRootToken: *edcVaultToken
#       networkPolicy:
#         enabled: *netPolEnabled
#     secretNames:
#       dapsPrivateKey: *edcConsumerVaultDapsPrivateKey
#       dapsPublicKey: *edcConsumerVaultDapsPublicKey
#       transferProxyTokenEncryptionAesKey: *edcConsumerVaultTransferEncryptionAesKey
#       transferProxyTokenSignerPrivateKey: *edcConsumerVaultTransferPrivateKey
#       transferProxyTokenSignerPublicKey: *edcConsumerVaultTransferPublicKey

# edcprovider:
#   nameOverride: edcprovider
#   install:
#     daps: false
#     postgresql: true
#     vault: false
#   backendService:
#     # TODO: what is the correct value here?
#     httpProxyTokenReceiverUrl: "http://localhost"
#   controlplane:
#     endpoints:
#       management:
#         authKey: provider-authkey
#     image:
#       repository: *edcCpImage
#       tag: *edcImageTag
#   daps:
#     clientId: *edcProviderDapsClientId
#   dataplane:
#     image:
#       repository: *edcDpImage
#       tag: *edcImageTag
#   participant:
#     id: provider
#     clientId: *edcProviderDapsClientId
#   networkPolicy:
#     enabled: *netPolEnabled
#   postgresql:
#     nameOverride: provider-postgresql
#     jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-provider-postgresql:5432/edc"
#     auth:
#       username: psql-provider-user
#       password: psql-provider-password
#     networkPolicy:
#       enabled: *netPolEnabled
#       ingressRules:
#         primaryAccessOnlyFrom:
#           enabled: true
#           podSelector:
#             app.kubernetes.io/name: edcprovider-controlplane
#             app.kubernetes.io/instance: '{{ .Release.Name }}-controlplane'
#   vault:
#     hashicorp:
#       token: *edcVaultToken
#     secretNames:
#       dapsPrivateKey: *edcProviderVaultDapsPrivateKey
#       dapsPublicKey: *edcProviderVaultDapsPublicKey
#       transferProxyTokenEncryptionAesKey: *edcProviderVaultTransferEncryptionAesKey
#       transferProxyTokenSignerPrivateKey: *edcProviderVaultTransferPrivateKey
#       transferProxyTokenSignerPublicKey: *edcProviderVaultTransferPublicKey

portal:
  enabled: true
  replicaCount: 1

centralidp:
  enabled: true
  keycloak:
    nameOverride: "centralidp"
    replicaCount: 1
    postgresql:
      nameOverride: "centralidp-postgresql"
      architecture: standalone

sharedidp:
  enabled: true
  keycloak:
    nameOverride: "sharedidp"
    replicaCount: 1
    postgresql:
      nameOverride: "sharedidp-postgresql"
      architecture: standalone

bpndiscovery:
  enabled: true
  enablePostgres: true
  bpndiscovery:
    authentication: false
    bpndiscoverEndpoint:
      allowedTypes: oen,wmi,passtype,manufacturerPartId
      description: Service to discover BPN for different kind of type numbers
      endpointAddress: /bpndiscovery
      documentation: /bpndiscovery/swagger-ui/index.html
      timeToLive: "31536000"
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "bpndiscovery-postgresql"

discoveryfinder:
  enabled: true
  enablePostgres: true
  discoveryfinder:
    authentication: false
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "discoveryfinder-postgresql"

sdfactory:
  enabled: true
  secret:
    # -- JWK Set URI
    jwkSetUri: "https://centralidp.example.org/auth/realms/CX-Central/protocol/openid-connect/certs"
    # -- Custodian wallet client id
    clientId: ""
    # -- Custodian wallet client secret
    clientSecret: ""
    # -- Keycloak URL
    authServerUrl: "https://centralidp.example.org/auth"
    # -- Keycloak Realm detail
    realm: ""
    # -- Keycloak Resource detail
    resource: ""
    # -- Details for Custodian wallet URI
    custodianWalletUri: ""
    # -- Details for Clearing House URI
    clearingHouseUri: ""
    # -- Details for Clearing House URL
    clearingHouseServerUrl: ""
    # -- Details for Clearing House Realm
    clearingHouseRealm: ""
    # -- Details for Clearing House Client ID
    clearingHouseClientId: ""
    # -- Details for Clearing House Client Secret
    clearingHouseClientSecret: ""

dataconsumer:
  enabled: true
  seedTestdata: false
  nameOverride: dataconsumer
  tractusx-connector:
    nameOverride: dataconsumer-edc
    participant:
      id: BPNL000000000000
    controlplane:
      ssi:  # TODO configure MIW once available
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      endpoints:
        management:
          authKey: TEST1
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      jdbcUrl: "jdbc:postgresql://dataconsumer-db:5432/edc"
    vault:  # TODO configure Vault once available
      hashicorp:
        url:
        token:
        paths:
          secret:
          health:
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:

  postgresql:
    fullnameOverride: dataconsumer-db
    nameOverride: dataconsumer-db

  digital-twin-registry:
    enabled: false

  simple-data-backend:
    enabled: false

dataprovider:
  enabled: true
  backendUrl: http://{{ .Release.Name }}-dataprovider-submodelserver:8080
  registryUrl: http://{{ .Release.Name }}-dataprovider-digital-twin-registry:8080/api/v3.0
  controlplanePublicUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8084
  controlplaneManagementUrl: http://{{ .Release.Name }}-dataprovider-edc-controlplane:8081
  dataplaneUrl: http://{{ .Release.Name }}-dataprovider-edc-dataplane:8081
  nameOverride: dataprovider
  tractusx-connector:
    nameOverride: dataprovider-edc
    participant:
      id:
    controlplane:
      ssi:  # TODO configure MIW once available
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      endpoints:
        management:
          authKey: TEST2
      ingresses:
        - enabled: false
    dataplane:
      ingresses:
        - enabled: false
    postgresql:
      nameOverride: dataprovider-db
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-dataprovider-db:5432/edc"
    vault:
      hashicorp:
        url: http://{{ .Release.Name }}-vault:8200
        token: *vault-token
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:
  postgresql:
    fullnameOverride: dataprovider-db
    nameOverride: dataprovider-db

  digital-twin-registry:
    nameOverride: dataprovider-digital-twin-registry
    postgresql:
      nameOverride: dataprovider-digital-twin-registry-db
      auth:
        existingSecret: dataprovider-secret-dtr-postgres-init
    registry:
      host: dataprovider-digital-twin-registry.test

  simple-data-backend:
    nameOverride: dataprovider-submodelserver
    ingress:
      enabled: false
