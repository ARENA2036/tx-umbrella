
{{- /* Define a local variable to control Job execution */ -}}
{{- $jobEnabled := true }}  # Set to false to skip the Job
{{- if $jobEnabled }}

#  Job to create secret for update secret
apiVersion: batch/v1
kind: Job
metadata:
  # name: update-umbrella-secret
  name: "{{ .Release.Name }}-update-umbrella-secret"
  namespace: {{ .Release.Namespace }}
  annotations:
    # "helm.sh/hook": pre-install,pre-upgrade
    # "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-1"
    redeploy-timestamp: "{{ now | unixEpoch }}"
spec:
  ttlSecondsAfterFinished: 180  # Delete 3 minutes after completion
  template:
    spec:
      serviceAccountName: secret-manager-sa
      restartPolicy: OnFailure
      containers:
        - name: update-secret
          # image: bitnami/kubectl:1.28
          image: mcr.microsoft.com/azure-cli:2.47.0
          env:
            ##### sharedidp 
            - name: SHAREDIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_ADMIN_PASSWORD }}"
            - name: SHAREDIDP_ENABLED
              value: "{{ .Values.sharedidp.enabled }}"
            - name: SHAREDIDP_NAME
              value: "{{ .Values.sharedidp.keycloak.nameOverride }}"
              
             ##### sharedidp-postgresql
            - name: SHAREDIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_PG_PASSWORD }}"
            - name: SHAREDIDP_PG_ENABLED
              value: "{{ .Values.sharedidp.enabled }}"
            - name: SHAREDIDP_PG_NAME
              value: "{{ .Values.sharedidp.keycloak.postgresql.nameOverride }}"

            ##### cx-operator_Password_Change
            - name: CX_USER_PASSWORD
              value: "{{ .Values.secretEnv.CX_USER_PASSWORD }}"
            
            ##### Smtp-Confiration (same password use in portal-backend-mailing secrets)
            - name: ARENA_SMTP_PASSWORD
              value: "{{ .Values.secretEnv.ARENA_SMTP_PASSWORD }}"
            - name: ARENA_SMTP_PORT
              value: "{{ .Values.secretEnv.ARENA_SMTP_PORT }}"
            - name: ARENA_SMTP_SERVER
              value: "{{ .Values.secretEnv.ARENA_SMTP_SERVER }}"
            - name: ARENA_SMTP_USERNAME
              value: "{{ .Values.secretEnv.ARENA_SMTP_USERNAME }}"

            ##### master service Accounts 
            - name: SA_CX_OPERATOR
              value: "{{ .Values.secretEnv.SA_CX_OPERATOR }}"
            - name: SA_PROVISIONING
              value: "{{ .Values.secretEnv.SA_PROVISIONING }}"

            ##### centralidp
            - name: CENTRALIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_ADMIN_PASSWORD }}"
            - name: CENTRALIDP_ENABLED
              value: "{{ .Values.centralidp.enabled }}"
            - name: CENTRALIDP_NAME
              value: "{{ .Values.centralidp.keycloak.nameOverride }}"

            ##### centralidp-postgresql
            - name: CENTRALIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_PG_PASSWORD }}"
            - name: CENTRALIDP_PG_ENABLED
              value: "{{ .Values.centralidp.enabled }}"
            - name: CENTRALIDP_PG_NAME
              value: "{{ .Values.centralidp.keycloak.postgresql.nameOverride }}"

            ##### centralidp-clients
            - name: MIW
              value: "{{ .Values.secretEnv.MIW }}"
            - name: BPDM
              value: "{{ .Values.secretEnv.BPDM }}"
            - name: BPDMGATE
              value: "{{ .Values.secretEnv.BPDMGATE }}"
            - name: BPDMORCHESTRATOR
              value: "{{ .Values.secretEnv.BPDMORCHESTRATOR }}"

            ##### serviceAccount
            - name: SA_CL1_REG_2
              value: "{{ .Values.secretEnv.SA_CL1_REG_2 }}"
            - name: SA_CLI2_01
              value: "{{ .Values.secretEnv.SA_CLI2_01 }}"
            - name: SA_CLI2_02
              value: "{{ .Values.secretEnv.SA_CLI2_02 }}"
            - name: SA_CLI2_03
              value: "{{ .Values.secretEnv.SA_CLI2_03 }}"
            - name: SA_CLI2_04
              value: "{{ .Values.secretEnv.SA_CLI2_04 }}"
            - name: SA_CLI2_05
              value: "{{ .Values.secretEnv.SA_CLI2_05 }}"
            - name: SA_CL3_CX_1
              value: "{{ .Values.secretEnv.SA_CL3_CX_1 }}"
            - name: SA_CL5_CUSTODIAN_2
              value: "{{ .Values.secretEnv.SA_CL5_CUSTODIAN_2 }}"
            - name: SA_CL7_CX_1
              value: "{{ .Values.secretEnv.SA_CL7_CX_1 }}"
            - name: SA_CL7_CX_5
              value: "{{ .Values.secretEnv.SA_CL7_CX_5 }}"
            - name: SA_CL7_CX_7
              value: "{{ .Values.secretEnv.SA_CL7_CX_7 }}"
            - name: SA_CL8_CX_1
              value: "{{ .Values.secretEnv.SA_CL8_CX_1 }}"
            - name: SA_CL21_01
              value: "{{ .Values.secretEnv.SA_CL21_01 }}"
            - name: SA_CL22_01
              value: "{{ .Values.secretEnv.SA_CL22_01 }}"
            - name: SA_CL24_01
              value: "{{ .Values.secretEnv.SA_CL24_01 }}"
            - name: SA_CL25_CX_1
              value: "{{ .Values.secretEnv.SA_CL25_CX_1 }}"
            - name: SA_CL25_CX_2
              value: "{{ .Values.secretEnv.SA_CL25_CX_2 }}"
            - name: SA_CL25_CX_3
              value: "{{ .Values.secretEnv.SA_CL25_CX_3 }}"

              ##### extra service accounts
            - name: SA_SATEST01
              value: "{{ .Values.secretEnv.SA_SATEST01 }}"
            - name: SA_SATEST02
              value: "{{ .Values.secretEnv.SA_SATEST02 }}"
            - name: SA_SATEST03
              value: "{{ .Values.secretEnv.SA_SATEST03 }}"
            - name: SA_SATEST04
              value: "{{ .Values.secretEnv.SA_SATEST04 }}"
            - name: SA_SATEST05
              value: "{{ .Values.secretEnv.SA_SATEST05 }}"
            - name: SA_SATEST06
              value: "{{ .Values.secretEnv.SA_SATEST06 }}"
            - name: SA_SATEST07
              value: "{{ .Values.secretEnv.SA_SATEST07 }}"
            - name: SA_SATEST08
              value: "{{ .Values.secretEnv.SA_SATEST08 }}"
            - name: SA_SATEST09
              value: "{{ .Values.secretEnv.SA_SATEST09 }}"
            - name: SA_SATEST10
              value: "{{ .Values.secretEnv.SA_SATEST10 }}"
            - name: SA_SATEST11
              value: "{{ .Values.secretEnv.SA_SATEST11 }}"
            - name: SA_SATEST12
              value: "{{ .Values.secretEnv.SA_SATEST12 }}"
            - name: SA_SATEST13
              value: "{{ .Values.secretEnv.SA_SATEST13 }}"
            - name: SA_SATEST14
              value: "{{ .Values.secretEnv.SA_SATEST14 }}"
            - name: SA_SATEST15
              value: "{{ .Values.secretEnv.SA_SATEST15 }}"
            - name: SA_SATEST16
              value: "{{ .Values.secretEnv.SA_SATEST16 }}"
            - name: SA_SATEST17
              value: "{{ .Values.secretEnv.SA_SATEST17 }}"
            - name: SA_SATEST18
              value: "{{ .Values.secretEnv.SA_SATEST18 }}"
            - name: SA_SATEST19
              value: "{{ .Values.secretEnv.SA_SATEST19 }}"
            - name: SA_SATEST20
              value: "{{ .Values.secretEnv.SA_SATEST20 }}"
            - name: SA_SATEST21
              value: "{{ .Values.secretEnv.SA_SATEST21 }}"
            - name: SA_SATEST22
              value: "{{ .Values.secretEnv.SA_SATEST22 }}"

              ##### bpdm-postgres #####
            - name: BPDM_PG_PASSWORD
              value: "{{ .Values.secretEnv.BPDM_PG_PASSWORD }}"
            - name: BPDM_ENABLED
              value: "{{ .Values.bpdm.enabled }}"
            - name: BPDM_NAME
              value: "{{ .Values.bpdm.postgres.nameOverride }}"
              
            ##### portal-backend-postgresql
            - name: PORTAL_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.PORTAL_POSTGRES_PASSWORD }}"
            - name: PORTAL_PG_ENABLED
              value: "{{ .Values.portal.postgresql.enabled }}"
            - name: PORTAL_PG_NAME
              # value: "{{ .Values.portal.postgresql.nameOverride }}"
              value: "portal-postgres"

            ##### pgadmin4
            - name: PGADMIN_PASSWORD
              value: "{{ .Values.secretEnv.PGADMIN_PASSWORD }}"
            - name: PGADMIN_ENABLED
              value: "{{ .Values.pgadmin4.enabled }}"
            - name: PGADMIN_NAME
              value: "pgadmin4"

            ##### discoveryfinder-postgresql
            - name: DISCOVERYFINDER_ENABLED
              value: "{{ .Values.discoveryfinder.enabled }}"
            - name: DISCOVERYFINDER_PG_ENABLED
              value: "{{ .Values.discoveryfinder.enablePostgres }}"
            - name: DISCOVERYFINDER_PASSWORD
              value: "{{ .Values.secretEnv.DISCOVERYFINDER_PASSWORD }}"
            - name: DISCOVERYFINDER_SECRET_NAME
              value: "secret-discoveryfinder-postgres-init"

            ##### bpndiscovery-postgresql
            - name: BPNDISCOVERY_PG_ENABLED
              value: "{{ .Values.bpndiscovery.enablePostgres }}"
            - name: BPNDISCOVERY_PASSWORD
              value: "{{ .Values.secretEnv.BPNDISCOVERY_PASSWORD }}"
            - name: BPNDISCOVERY_SECRET_NAME
              value: "secret-bpndiscovery-postgres-init"

            ##### portal-backend-interfaces
            - name: PORTAL_BACKEND_CLIENT_SECRET
              value: "{{ .Values.secretEnv.PORTAL_BACKEND_CLIENT_SECRET }}"
            - name: ISSUERCOMPONENT_CLIENT_SECRET
              value: "{{ .Values.secretEnv.ISSUERCOMPONENT_CLIENT_SECRET }}"
            - name: CUSTODIAN_CLIENT_SECRET
              value: "{{ .Values.secretEnv.CUSTODIAN_CLIENT_SECRET }}"
            - name: SDFACTORY_ADDRESS
              value: "{{ .Values.secretEnv.SDFACTORY_ADDRESS }}"
            - name: OFFERPROVIDER_CLIENT_SECRET
              value: "{{ .Values.secretEnv.OFFERPROVIDER_CLIENT_SECRET }}"
            - name: BPDM_CLIENT_SECRET
              value: "{{ .Values.secretEnv.BPDM_CLIENT_SECRET }}"
            - name: PORTAL_ENABLED
              value: "{{ .Values.portal.enabled }}"
            - name: PORTAL_BACKEND_NAME
              value: "portal-backend-interfaces"

              ##### discovery finder Client Secret
            - name: AUTHORIZATION_GRANT_TYPE
              value: "{{ .Values.secretEnv.AUTHORIZATION_GRANT_TYPE }}"
            - name: BPNDISCOVERY_ENABLED
              value: "{{ .Values.bpndiscovery.enabled }}"
            - name: BPNDISCOVERY_NAME
              value: "bpndiscovery"

            ##### ssi-credential-issuer secrets
            - name: PORTAL_CLIENT_SECRET
              value: "{{ .Values.secretEnv.PORTAL_CLIENT_SECRET }}"
            - name: WALLET_CLIENT_SECRET
              value: "{{ .Values.secretEnv.WALLET_CLIENT_SECRET }}"
            - name: SSI_CREDENTIAL_ISSUER_ENABLED
              value: '{{ index .Values "ssi-credential-issuer" "enabled" }}'
            - name: SSI_CREDENTIAL_ISSUER_NAME
              value: "ssi-credential-issuer"

              ##### ssi-dim-wallet-secret
            - name: SSI_PORTAL_CLIENT_SECRET
              value: "{{ .Values.secretEnv.SSI_PORTAL_CLIENT_SECRET }}"
            - name: SSI_DIM_WALLET_ENABLED
              value: '{{ index .Values "ssi-dim-wallet-stub" "enabled" }}'
              ##### portal-backend-keycloak
            - name: SAME_SA_CL1_REG_2
              value: "{{ .Values.secretEnv.SAME_SA_CL1_REG_2 }}"
            - name: SA_CL1_REG_1
              value: "{{ .Values.secretEnv.SA_CL1_REG_1 }}"
              ##### issuer-postgresql 
            - name: UMBRELLA_ISSUER_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_POSTGRES_PASSWORD }}"
            - name: UMBRELLA_ISSUER_REPLICATION_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_REPLICATION_PASSWORD }}"
            - name: ISSUER_POSTGRES_NAME
              value: "issuer-postgres"
              # value: "{{ index .Values "ssi-credential-issuer" "postgresql" "nameOverride" }}"
            - name: ISSUER_POSTGRES_ENABLED
              value: '{{ index .Values "ssi-credential-issuer" "enabled" }}'

              ##### dataprovider
            - name: DATAPROVIDER_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_PASSWORD }}"
            - name: DATAPROVIDER_ENABLED
              value: '{{ index .Values "tx-data-provider" "enabled" }}'
            - name: DATAPROVIDER_NAME
              value: '{{ index .Values "tx-data-provider" "tractusx-connector" "postgresql" "nameOverride" }}'

              ##### dataconsumer-1
            - name: DATACONSUMER1_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER1_PASSWORD }}"
            - name: DATACONSUMER1_ENABLED
              value: "{{ .Values.dataconsumerOne.enabled }}"
            - name: DATACONSUMER1_NAME
              value: '{{ index .Values "dataconsumerOne" "tractusx-connector" "postgresql" "nameOverride" }}'

              ##### dataconsumer-2
            - name: DATACONSUMER2_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER2_PASSWORD }}"
            - name: DATACONSUMER2_ENABLED
              value: "{{ .Values.dataconsumerTwo.enabled }}"
            - name: DATACONSUMER2_NAME
              value: '{{ index .Values "dataconsumerTwo" "tractusx-connector" "postgresql" "nameOverride" }}'

              #### dataprovider-dtr
            - name: DATAPROVIDER_DTR_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_DTR_PASSWORD }}"
            - name: DATAPROVIDER_DTR_NAME
              value: "dataprovider-secret-dtr-postgres-init"

          command:
            - /bin/sh
            - -c
            - |
              # Install kubectl
              az aks install-cli
                        
              #############################################################################
              ##### sharedidp
              ###### --- Script to sharedidp --- ######
              if [ "$SHAREDIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$SHAREDIDP_NAME secret..."
                if kubectl get secret {{ .Release.Name }}-$SHAREDIDP_NAME -n "$NAMESPACE" >/dev/null 2>&1; then
                  # Merge admin-password only, preserve existing DB password
                  kubectl patch secret {{ .Release.Name }}-$SHAREDIDP_NAME -n "$NAMESPACE" --type merge \
                    -p "{\"stringData\":{\"admin-password\":\"$SHAREDIDP_ADMIN_PASSWORD\"}}"
                  echo "{{ .Release.Name }}-$SHAREDIDP_NAME updated successfully."
                else
                  # Create secret with admin-password; add database-password if known
                  kubectl create secret generic {{ .Release.Name }}-$SHAREDIDP_NAME -n "$NAMESPACE" \
                    --from-literal=admin-password="$SHAREDIDP_ADMIN_PASSWORD"
                  echo "{{ .Release.Name }}-$SHAREDIDP_NAME created successfully."
                fi
              else
                echo "sharedidp.enabled is false, skipping Keycloak secret."
              fi

              #############################################################################
              ##### sharedidp-postgresql
              ###### --- Script to sharedidp-postgresql --- ######  
              if [ "$SHAREDIDP_PG_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$SHAREDIDP_PG_NAME secret..."
                if kubectl get secret {{ .Release.Name }}-$SHAREDIDP_PG_NAME -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$SHAREDIDP_PG_NAME -n "$NAMESPACE" \
                    -p "{\"stringData\":{\"password\":\"$SHAREDIDP_PG_PASSWORD\",\"postgres-password\":\"$SHAREDIDP_PG_PASSWORD\"}}"
                  echo "{{ .Release.Name }}-$SHAREDIDP_PG_NAME updated successfully."
                else
                  kubectl create secret generic {{ .Release.Name }}-$SHAREDIDP_PG_NAME -n "$NAMESPACE" \
                    --from-literal=password="$SHAREDIDP_PG_PASSWORD" \
                    --from-literal=postgres-password="$SHAREDIDP_PG_PASSWORD"
                  echo "{{ .Release.Name }}-$SHAREDIDP_PG_NAME created successfully."
                fi
              else
                echo "sharedidp.enabled is false, skipping PostgreSQL secret."
              fi

              #############################################################################
              ##### realmSeeding + SMTP Configurations
              ###### --- Script to create or update {{ .Release.Name }}-sharedidp-cx-operator-realm-seeding --- ######
              if [ "$SHAREDIDP_ENABLED" = "true" ]; then
                SECRET_NAME="{{ .Release.Name }}-sharedidp-cx-operator-realm-seeding"
                echo "Checking/creating $SECRET_NAME in namespace $NAMESPACE..."

                if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  # Patch all values at once
                  kubectl patch secret "$SECRET_NAME" -n "$NAMESPACE" \
                    --type merge \
                    -p "{\"stringData\":{
                          \"initial-user-password\":\"$CX_USER_PASSWORD\",
                          \"mailing-password\":\"$ARENA_SMTP_PASSWORD\",
                          \"mailing-port\":\"$ARENA_SMTP_PORT\",
                          \"mailing-host\":\"$ARENA_SMTP_SERVER\",
                          \"mailing-username\":\"$ARENA_SMTP_USERNAME\",
                          \"mailing-from\":\"$ARENA_SMTP_USERNAME\",
                          \"mailing-reply-to\":\"$ARENA_SMTP_USERNAME\"
                        }}"
                  echo "$SECRET_NAME updated successfully with realm-seeding and SMTP configuration."
                else
                  # Create secret with all values at once
                  kubectl create secret generic "$SECRET_NAME" -n "$NAMESPACE" \
                    --from-literal=initial-user-password="$CX_USER_PASSWORD" \
                    --from-literal=mailing-password="$ARENA_SMTP_PASSWORD" \
                    --from-literal=mailing-port="$ARENA_SMTP_PORT" \
                    --from-literal=mailing-host="$ARENA_SMTP_SERVER" \
                    --from-literal=mailing-username="$ARENA_SMTP_USERNAME" \
                    --from-literal=mailing-from="$ARENA_SMTP_USERNAME" \
                    --from-literal=mailing-reply-to="$ARENA_SMTP_USERNAME"
                  echo "$SECRET_NAME created successfully with realm-seeding and SMTP configuration."
                fi
              else
                echo "sharedidp.enabled is false, skipping $SECRET_NAME secret."
              fi

              #############################################################################
              ##### portal-backend-mailing - SMTP Configurations
              ###### --- Script to create or update portal-backend-mailing --- ######
              if [ "$PORTAL_ENABLED" = "true" ]; then
                echo "Checking/creating portal-backend-mailing..."
                if kubectl get secret portal-backend-mailing -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret portal-backend-mailing \
                    -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"password\":\"$ARENA_SMTP_PASSWORD\",
                          \"provisioning-sharedrealm-password\":\"$ARENA_SMTP_PASSWORD\"
                        }}"
                  echo "portal-backend-mailing (SMTP Configurations) updated successfully."
                else
                  kubectl create secret generic portal-backend-mailing \
                    -n "$NAMESPACE" \
                    --from-literal=password="$ARENA_SMTP_PASSWORD" \
                    --from-literal=provisioning-sharedrealm-password="$ARENA_SMTP_PASSWORD"

                  echo "portal-backend-mailing (SMTP Configurations) created successfully."
                fi
              else
                echo "portal.enabled is false, skipping portal-backend-mailing secret."
              fi

              #############################################################################
              ##### --- Script to create or update {{ .Release.Name }}-sharedidp-master-realm-seeding --- ######
              if [ "$SHAREDIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-sharedidp-master-realm-seeding secret..."
                if kubectl get secret {{ .Release.Name }}-sharedidp-master-realm-seeding -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-sharedidp-master-realm-seeding -n "$NAMESPACE" \
                    --type merge \
                    -p "{\"stringData\":{\"sa-cx-operator\":\"$SA_CX_OPERATOR\",\"sa-provisioning\":\"$SA_PROVISIONING\"}}"
                  echo "{{ .Release.Name }}-sharedidp-master-realm-seeding Secret updated."
                else
                  kubectl create secret generic {{ .Release.Name }}-sharedidp-master-realm-seeding -n "$NAMESPACE" \
                    --from-literal=sa-cx-operator="$SA_CX_OPERATOR" \
                    --from-literal=sa-provisioning="$SA_PROVISIONING"
                  echo "{{ .Release.Name }}-sharedidp-master-realm-seeding Secret created."
                fi
              else
                echo "sharedidp.enabled is false, skipping master service accounts secret."
              fi

              #############################################################################
              ##### centralidp
              if [ "$CENTRALIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$CENTRALIDP_NAME secret..."
                if kubectl get secret {{ .Release.Name }}-$CENTRALIDP_NAME -n "$NAMESPACE" >/dev/null 2>&1; then
                  # Merge admin password only, keep existing DB password
                  kubectl patch secret {{ .Release.Name }}-$CENTRALIDP_NAME -n "$NAMESPACE" --type merge \
                    -p "{\"stringData\":{\"admin-password\":\"$CENTRALIDP_ADMIN_PASSWORD\"}}"
                  echo "{{ .Release.Name }}-$CENTRALIDP_NAME updated successfully."
                else
                  # Create secret with admin password; you can also add DB password here if needed
                  kubectl create secret generic {{ .Release.Name }}-$CENTRALIDP_NAME -n "$NAMESPACE" \
                    --from-literal=admin-password="$CENTRALIDP_ADMIN_PASSWORD"
                  echo "{{ .Release.Name }}-$CENTRALIDP_NAME created successfully."
                fi
              else
                echo "centralidp.enabled is false, skipping centralidp secret."
              fi

              #############################################################################
              ##### centralidp-postgresql
              if [ "$CENTRALIDP_PG_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$CENTRALIDP_PG_NAME secret..."
                if kubectl get secret {{ .Release.Name }}-$CENTRALIDP_PG_NAME -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$CENTRALIDP_PG_NAME -n "$NAMESPACE" \
                    -p "{\"stringData\":{\"password\":\"$CENTRALIDP_PG_PASSWORD\",\"postgres-password\":\"$CENTRALIDP_PG_PASSWORD\"}}"
                  echo "{{ .Release.Name }}-$CENTRALIDP_PG_NAME updated successfully."
                else
                  kubectl create secret generic {{ .Release.Name }}-$CENTRALIDP_PG_NAME -n "$NAMESPACE" \
                    --from-literal=password="$CENTRALIDP_PG_PASSWORD" \
                    --from-literal=postgres-password="$CENTRALIDP_PG_PASSWORD"
                  echo "{{ .Release.Name }}-$CENTRALIDP_PG_NAME created successfully."
                fi
              else
                echo "centralidp.enabled is false, skipping centralidp-postgresql secret."
              fi

              #############################################################################
              ##### --- Script to create or update {{ .Release.Name }}-centralidp-clients secret --- ######
              if [ "$CENTRALIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-centralidp-clients secret..."

                if kubectl get secret {{ .Release.Name }}-centralidp-clients -n "$NAMESPACE" >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret {{ .Release.Name }}-centralidp-clients -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"miw\":\"$MIW\",
                          \"bpdm\":\"$BPDM\",
                          \"bpdm-gate\":\"$BPDMGATE\",
                          \"bpdm-orchestrator\":\"$BPDMORCHESTRATOR\"
                        }}"
                  echo "{{ .Release.Name }}-centralidp-clients secret updated."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic {{ .Release.Name }}-centralidp-clients -n "$NAMESPACE" \
                    --from-literal=miw="$MIW" \
                    --from-literal=bpdm="$BPDM" \
                    --from-literal=bpdm-gate="$BPDMGATE" \
                    --from-literal=bpdm-orchestrator="$BPDMORCHESTRATOR"
                  echo "{{ .Release.Name }}-centralidp-clients secret created."
                fi
              else
                echo "centralidp.enabled is false, skipping centralidp client secrets."
              fi

              ############################################################################
              ##### --- Script to create or update {{ .Release.Name }}-centralidp-base-service-accounts --- ######
              if [ "$CENTRALIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-centralidp-base-service-accounts secret in namespace {{ .Release.Namespace }}..."

                if kubectl get secret {{ .Release.Name }}-centralidp-base-service-accounts -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret {{ .Release.Name }}-centralidp-base-service-accounts -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                          \"sa-cl1-reg-2\":\"$SA_CL1_REG_2\",
                          \"sa-cl2-01\":\"$SA_CLI2_01\",
                          \"sa-cl2-02\":\"$SA_CLI2_02\",
                          \"sa-cl2-03\":\"$SA_CLI2_03\",
                          \"sa-cl2-04\":\"$SA_CLI2_04\",
                          \"sa-cl2-05\":\"$SA_CLI2_05\",
                          \"sa-cl3-cx-1\":\"$SA_CL3_CX_1\",
                          \"sa-cl5-custodian-2\":\"$SA_CL5_CUSTODIAN_2\",
                          \"sa-cl7-cx-1\":\"$SA_CL7_CX_1\",
                          \"sa-cl7-cx-5\":\"$SA_CL7_CX_5\",
                          \"sa-cl7-cx-7\":\"$SA_CL7_CX_7\",
                          \"sa-cl8-cx-1\":\"$SA_CL8_CX_1\",
                          \"sa-cl21-01\":\"$SA_CL21_01\",
                          \"sa-cl22-01\":\"$SA_CL22_01\",
                          \"sa-cl24-01\":\"$SA_CL24_01\",
                          \"sa-cl25-cx-1\":\"$SA_CL25_CX_1\",
                          \"sa-cl25-cx-2\":\"$SA_CL25_CX_2\",
                          \"sa-cl25-cx-3\":\"$SA_CL25_CX_3\"
                        }}"
                  echo "{{ .Release.Name }}-centralidp-base-service-accounts secret updated successfully."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic {{ .Release.Name }}-centralidp-base-service-accounts -n {{ .Release.Namespace }} \
                    --from-literal=sa-cl1-reg-2="$SA_CL1_REG_2" \
                    --from-literal=sa-cl2-01="$SA_CLI2_01" \
                    --from-literal=sa-cl2-02="$SA_CLI2_02" \
                    --from-literal=sa-cl2-03="$SA_CLI2_03" \
                    --from-literal=sa-cl2-04="$SA_CLI2_04" \
                    --from-literal=sa-cl2-05="$SA_CLI2_05" \
                    --from-literal=sa-cl3-cx-1="$SA_CL3_CX_1" \
                    --from-literal=sa-cl5-custodian-2="$SA_CL5_CUSTODIAN_2" \
                    --from-literal=sa-cl7-cx-1="$SA_CL7_CX_1" \
                    --from-literal=sa-cl7-cx-5="$SA_CL7_CX_5" \
                    --from-literal=sa-cl7-cx-7="$SA_CL7_CX_7" \
                    --from-literal=sa-cl8-cx-1="$SA_CL8_CX_1" \
                    --from-literal=sa-cl21-01="$SA_CL21_01" \
                    --from-literal=sa-cl22-01="$SA_CL22_01" \
                    --from-literal=sa-cl24-01="$SA_CL24_01" \
                    --from-literal=sa-cl25-cx-1="$SA_CL25_CX_1" \
                    --from-literal=sa-cl25-cx-2="$SA_CL25_CX_2" \
                    --from-literal=sa-cl25-cx-3="$SA_CL25_CX_3"
                  echo "{{ .Release.Name }}-centralidp-base-service-accounts secret created successfully."
                fi
              else
                echo "centralidp.enabled is false, skipping base service account secrets."
              fi

              #############################################################################
              ##### --- Script to create or update {{ .Release.Name }}-centralidp-extra-service-accounts --- ######
              if [ "$CENTRALIDP_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-centralidp-extra-service-accounts secret..."

                if kubectl get secret {{ .Release.Name }}-centralidp-extra-service-accounts -n "$NAMESPACE" >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret {{ .Release.Name }}-centralidp-extra-service-accounts -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"satest01\":\"$SA_SATEST01\",
                          \"satest02\":\"$SA_SATEST02\",
                          \"satest03\":\"$SA_SATEST03\",
                          \"satest04\":\"$SA_SATEST04\",
                          \"satest05\":\"$SA_SATEST05\",
                          \"satest06\":\"$SA_SATEST06\",
                          \"satest07\":\"$SA_SATEST07\",
                          \"satest08\":\"$SA_SATEST08\",
                          \"satest09\":\"$SA_SATEST09\",
                          \"satest10\":\"$SA_SATEST10\",
                          \"satest11\":\"$SA_SATEST11\",
                          \"satest12\":\"$SA_SATEST12\",
                          \"satest13\":\"$SA_SATEST13\",
                          \"satest14\":\"$SA_SATEST14\",
                          \"satest15\":\"$SA_SATEST15\",
                          \"satest16\":\"$SA_SATEST16\",
                          \"satest17\":\"$SA_SATEST17\",
                          \"satest18\":\"$SA_SATEST18\",
                          \"satest19\":\"$SA_SATEST19\",
                          \"satest20\":\"$SA_SATEST20\",
                          \"satest21\":\"$SA_SATEST21\",
                          \"satest22\":\"$SA_SATEST22\"
                        }}"
                  echo "{{ .Release.Name }}-centralidp-extra-service-accounts secret updated."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic {{ .Release.Name }}-centralidp-extra-service-accounts -n "$NAMESPACE" \
                    --from-literal=satest01="$SA_SATEST01" \
                    --from-literal=satest02="$SA_SATEST02" \
                    --from-literal=satest03="$SA_SATEST03" \
                    --from-literal=satest04="$SA_SATEST04" \
                    --from-literal=satest05="$SA_SATEST05" \
                    --from-literal=satest06="$SA_SATEST06" \
                    --from-literal=satest07="$SA_SATEST07" \
                    --from-literal=satest08="$SA_SATEST08" \
                    --from-literal=satest09="$SA_SATEST09" \
                    --from-literal=satest10="$SA_SATEST10" \
                    --from-literal=satest11="$SA_SATEST11" \
                    --from-literal=satest12="$SA_SATEST12" \
                    --from-literal=satest13="$SA_SATEST13" \
                    --from-literal=satest14="$SA_SATEST14" \
                    --from-literal=satest15="$SA_SATEST15" \
                    --from-literal=satest16="$SA_SATEST16" \
                    --from-literal=satest17="$SA_SATEST17" \
                    --from-literal=satest18="$SA_SATEST18" \
                    --from-literal=satest19="$SA_SATEST19" \
                    --from-literal=satest20="$SA_SATEST20" \
                    --from-literal=satest21="$SA_SATEST21" \
                    --from-literal=satest22="$SA_SATEST22"
                  echo "{{ .Release.Name }}-centralidp-extra-service-accounts secret created."
                fi
              else
                echo "centralidp.enabled is false, skipping extra service account secrets."
              fi
              #############################################################################
              ##### bpdm-postgres
              ###### --- Script to bpdm-postgres --- ######
              if [ "$BPDM_ENABLED" = "true" ]; then
                echo "BPDM is enabled. Checking/creating {{ .Release.Name }}-$BPDM_NAME secret..."

                if kubectl get secret {{ .Release.Name }}-$BPDM_NAME -n "$NAMESPACE" >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret {{ .Release.Name }}-$BPDM_NAME -n "$NAMESPACE" \
                    -p "{\"stringData\":{\"password\":\"$BPDM_PG_PASSWORD\",\"postgres-password\":\"$BPDM_PG_PASSWORD\"}}"
                  echo "{{ .Release.Name }}-$BPDM_NAME secret updated successfully."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic {{ .Release.Name }}-$BPDM_NAME -n "$NAMESPACE" \
                    --from-literal=password="$BPDM_PG_PASSWORD" \
                    --from-literal=postgres-password="$BPDM_PG_PASSWORD"
                  echo "{{ .Release.Name }}-$BPDM_NAME secret created successfully."
                fi
              else
                echo "BPDM is disabled. Skipping BPDM Postgres secret creation."
              fi

              #############################################################################
              ##### portal-backend-postgresql
              ###### --- Script to portal-backend-postgresql --- ######
              if [ "$PORTAL_PG_ENABLED" = "true" ]; then
                echo "Checking/creating $PORTAL_PG_NAME secret..."
                if kubectl get secret "$PORTAL_PG_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret "$PORTAL_PG_NAME" -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"postgres-password\":\"$PORTAL_POSTGRES_PASSWORD\",
                          \"portal-password\":\"$PORTAL_POSTGRES_PASSWORD\",
                          \"replication-password\":\"$PORTAL_POSTGRES_PASSWORD\",
                          \"provisioning-password\":\"$PORTAL_POSTGRES_PASSWORD\"
                        }}"
                  echo "$PORTAL_PG_NAME secret updated successfully."
                else
                  kubectl create secret generic "$PORTAL_PG_NAME" -n "$NAMESPACE" \
                    --from-literal=postgres-password="$PORTAL_POSTGRES_PASSWORD" \
                    --from-literal=portal-password="$PORTAL_POSTGRES_PASSWORD" \
                    --from-literal=replication-password="$PORTAL_POSTGRES_PASSWORD" \
                    --from-literal=provisioning-password="$PORTAL_POSTGRES_PASSWORD"
                  echo "$PORTAL_PG_NAME secret created successfully."
                fi
              else
                echo "portal.postgresql.enabled is false, skipping portal-backend-postgresql secret."
              fi

              #############################################################################
              ##### pgadmin4
              ###### --- Script to update pgadmin4 secret --- ######
              if [ "$PGADMIN_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$PGADMIN_NAME secret..."
                if kubectl get secret "{{ .Release.Name }}-$PGADMIN_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret "{{ .Release.Name }}-$PGADMIN_NAME" -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"password\":\"$PGADMIN_PASSWORD\"
                        }}"
                  echo "{{ .Release.Name }}-$PGADMIN_NAME secret updated successfully."
                else
                  kubectl create secret generic "{{ .Release.Name }}-$PGADMIN_NAME" -n "$NAMESPACE" \
                    --from-literal=password="$PGADMIN_PASSWORD"
                  echo "{{ .Release.Name }}-$PGADMIN_NAME secret created successfully."
                fi
              else
                echo "pgadmin4.enabled is false, skipping pgadmin4 secret."
              fi

              #############################################################################
              ##### discoveryfinder-postgresql
              ###### --- Script to update discoveryfinder init secret --- ######
              if [ "$DISCOVERYFINDER_ENABLED" = "true" ] && [ "$DISCOVERYFINDER_PG_ENABLED" = "true" ]; then
                echo "Checking/patching $DISCOVERYFINDER_SECRET_NAME secret..."
                if kubectl get secret "$DISCOVERYFINDER_SECRET_NAME" -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret "$DISCOVERYFINDER_SECRET_NAME" \
                    -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"SPRING_DATASOURCE_PASSWORD\":\"$DISCOVERYFINDER_PASSWORD\",
                          \"password\":\"$DISCOVERYFINDER_PASSWORD\",
                          \"postgres-password\":\"$DISCOVERYFINDER_PASSWORD\"
                        }}"
                  echo "$DISCOVERYFINDER_SECRET_NAME secret updated successfully."
                else
                  kubectl create secret generic "$DISCOVERYFINDER_SECRET_NAME" \
                    -n {{ .Release.Namespace }} \
                    --from-literal=SPRING_DATASOURCE_PASSWORD="$DISCOVERYFINDER_PASSWORD" \
                    --from-literal=password="$DISCOVERYFINDER_PASSWORD" \
                    --from-literal=postgres-password="$DISCOVERYFINDER_PASSWORD"
                  echo "$DISCOVERYFINDER_SECRET_NAME secret created successfully."
                fi
              else
                echo "discoveryfinder.enabled or discoveryfinder.enablePostgres is false, skipping secret update."
              fi

              #############################################################################
              ##### bpndiscovery-postgresql
              ###### --- Script to update bpndiscovery postgres secret --- ######
              if [ "$BPNDISCOVERY_ENABLED" = "true" ] && [ "$BPNDISCOVERY_PG_ENABLED" = "true" ]; then
                echo "Checking/patching $BPNDISCOVERY_SECRET_NAME secret..."
                if kubectl get secret "$BPNDISCOVERY_SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl patch secret "$BPNDISCOVERY_SECRET_NAME" -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"SPRING_DATASOURCE_PASSWORD\":\"$BPNDISCOVERY_PASSWORD\",
                          \"password\":\"$BPNDISCOVERY_PASSWORD\",
                          \"postgres-password\":\"$BPNDISCOVERY_PASSWORD\"
                        }}"
                  echo "$BPNDISCOVERY_SECRET_NAME secret updated successfully."
                else
                  kubectl create secret generic "$BPNDISCOVERY_SECRET_NAME" -n "$NAMESPACE" \
                    --from-literal=SPRING_DATASOURCE_PASSWORD="$BPNDISCOVERY_PASSWORD" \
                    --from-literal=password="$BPNDISCOVERY_PASSWORD" \
                    --from-literal=postgres-password="$BPNDISCOVERY_PASSWORD"
                  echo "$BPNDISCOVERY_SECRET_NAME secret created successfully."
                fi
              else
                echo "bpndiscovery.enabled or bpndiscovery.enablePostgres is false, skipping secret update."
              fi


              #############################################################################
              ##### portal-backend-interfaces
              ###### --- Script to portal-backend-interfaces --- ######
              if [ "$PORTAL_ENABLED" = "true" ]; then
                echo "Checking/creating $PORTAL_BACKEND_NAME secret..."

                if kubectl get secret "$PORTAL_BACKEND_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret "$PORTAL_BACKEND_NAME" -n "$NAMESPACE" \
                    -p "{\"stringData\":{
                          \"dim-client-secret\":\"$PORTAL_BACKEND_CLIENT_SECRET\",
                          \"issuercomponent-client-secret\":\"$ISSUERCOMPONENT_CLIENT_SECRET\",
                          \"custodian-client-secret\":\"$CUSTODIAN_CLIENT_SECRET\",
                          \"sdfactory-client-secret\":\"$SDFACTORY_ADDRESS\",
                          \"offerprovider-client-secret\":\"$OFFERPROVIDER_CLIENT_SECRET\",
                          \"bpdm-client-secret\":\"$BPDM_CLIENT_SECRET\"
                        }}"
                  echo "$PORTAL_BACKEND_NAME updated successfully."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic "$PORTAL_BACKEND_NAME" -n "$NAMESPACE" \
                    --from-literal=dim-client-secret="$PORTAL_BACKEND_CLIENT_SECRET" \
                    --from-literal=issuercomponent-client-secret="$ISSUERCOMPONENT_CLIENT_SECRET" \
                    --from-literal=custodian-client-secret="$CUSTODIAN_CLIENT_SECRET" \
                    --from-literal=sdfactory-client-secret="$SDFACTORY_ADDRESS" \
                    --from-literal=offerprovider-client-secret="$OFFERPROVIDER_CLIENT_SECRET" \
                    --from-literal=bpdm-client-secret="$BPDM_CLIENT_SECRET"
                  echo "$PORTAL_BACKEND_NAME created successfully."
                fi
              else
                echo "portal.enabled is false, skipping portal-backend-interfaces secret."
              fi
              
              #############################################################################
              ###### --- Script to create or update {{ .Release.Name }}-bpndiscovery --- ######
              if [ "$BPNDISCOVERY_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$BPNDISCOVERY_NAME secret..."
                if kubectl get secret {{ .Release.Name }}-$BPNDISCOVERY_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$BPNDISCOVERY_NAME -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                          \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DISCOVERYFINDER_CLIENT_AUTHORIZATION_GRANT_TYPE\":\"$AUTHORIZATION_GRANT_TYPE\"
                        }}"
                  echo "{{ .Release.Name }}-$BPNDISCOVERY_NAME secret updated."
                else
                  kubectl create secret generic {{ .Release.Name }}-$BPNDISCOVERY_NAME \
                    -n {{ .Release.Namespace }} \
                    --from-literal=SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DISCOVERYFINDER_CLIENT_AUTHORIZATION_GRANT_TYPE=$AUTHORIZATION_GRANT_TYPE
                  echo "{{ .Release.Name }}-$BPNDISCOVERY_NAME secret created."
                fi
              else
                echo "bpndiscovery.enabled is false, skipping {{ .Release.Name }}-$BPNDISCOVERY_NAME secret."
              fi

              #############################################################################
              ##### --- Script to create or update {{ .Release.Name }}-ssi-credential-issuer --- ######
              if [ "$SSI_CREDENTIAL_ISSUER_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME secret..."

                # Create or patch portal-client-secret
                if kubectl get secret {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{\"portal-client-secret\":\"$PORTAL_CLIENT_SECRET\"}}"
                  echo "Portal client secret updated."
                else
                  kubectl create secret generic {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME \
                    -n {{ .Release.Namespace }} \
                    --from-literal=portal-client-secret="$PORTAL_CLIENT_SECRET"
                  echo "Portal client secret created."
                fi

                # Create or patch wallet-client-secret
                if kubectl get secret {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{\"wallet-client-secret\":\"$WALLET_CLIENT_SECRET\"}}"
                  echo "Wallet client secret updated."
                else
                  kubectl create secret generic {{ .Release.Name }}-$SSI_CREDENTIAL_ISSUER_NAME \
                    -n {{ .Release.Namespace }} \
                    --from-literal=wallet-client-secret="$WALLET_CLIENT_SECRET"
                  echo "Wallet client secret created."
                fi

              else
                echo "ssi-credential-issuer.enabled is false, skipping secret creation."
              fi

              #############################################################################
              ##### --- Script to create or update ssi-dim-wallet-secret --- ######
              if [ "$SSI_DIM_WALLET_ENABLED" = "true" ]; then
                echo "ssi-dim-wallet-stub is enabled. Checking/creating ssi-dim-wallet-secret secret..."

                if kubectl get secret ssi-dim-wallet-secret -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret ssi-dim-wallet-secret -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                          \"PORTAL_CLIENT_SECRET\":\"$SSI_PORTAL_CLIENT_SECRET\"
                        }}"
                  echo "ssi-dim-wallet-secret Secret updated."
                else
                  kubectl create secret generic ssi-dim-wallet-secret \
                    -n {{ .Release.Namespace }} \
                    --from-literal=PORTAL_CLIENT_SECRET=$SSI_PORTAL_CLIENT_SECRET
                  echo "ssi-dim-wallet-secret Secret created."
                fi
              else
                echo "ssi-dim-wallet-stub.enabled is false, skipping ssi-dim-wallet-secret creation."
              fi

              #############################################################################
              ##### --- Script to create or update portal-backend-keycloak secret --- ######
              if [ "$PORTAL_ENABLED" = "true" ]; then
                echo "Portal is enabled. Checking/creating portal-backend-keycloak secret..."

                if kubectl get secret portal-backend-keycloak -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret portal-backend-keycloak -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                          \"central-client-secret\":\"$SAME_SA_CL1_REG_2\",
                          \"shared-client-secret\":\"$SA_CL1_REG_1\"
                        }}"
                  echo "portal-backend-keycloak secret updated."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic portal-backend-keycloak -n {{ .Release.Namespace }} \
                    --from-literal=central-client-secret=$SAME_SA_CL1_REG_2 \
                    --from-literal=shared-client-secret=$SA_CL1_REG_1
                  echo "portal-backend-keycloak secret created."
                fi
              else
                echo "Portal is disabled. Skipping portal-backend-keycloak secret creation."
              fi

              #############################################################################
              ##### issuer-postgresql
              ##### --- Script to update {{ .Release.Name }}-issuer-postgres --- ######
              if [ "$ISSUER_POSTGRES_ENABLED" = "true" ]; then
                echo "ssi-credential-issuer is enabled. Checking/creating $ISSUER_POSTGRES_NAME secret..."

                if kubectl get secret {{ .Release.Name }}-$ISSUER_POSTGRES_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  echo "Secret exists. Patching values..."
                  kubectl patch secret {{ .Release.Name }}-$ISSUER_POSTGRES_NAME -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                          \"postgres-password\":\"$UMBRELLA_ISSUER_POSTGRES_PASSWORD\",
                          \"password\":\"$UMBRELLA_ISSUER_POSTGRES_PASSWORD\",
                          \"replication-password\":\"$UMBRELLA_ISSUER_REPLICATION_PASSWORD\"
                        }}"
                  echo "$ISSUER_POSTGRES_NAME secret updated."
                else
                  echo "Secret does not exist. Creating new secret..."
                  kubectl create secret generic {{ .Release.Name }}-$ISSUER_POSTGRES_NAME -n {{ .Release.Namespace }} \
                    --from-literal=postgres-password=$UMBRELLA_ISSUER_POSTGRES_PASSWORD \
                    --from-literal=password=$UMBRELLA_ISSUER_POSTGRES_PASSWORD \
                    --from-literal=replication-password=$UMBRELLA_ISSUER_REPLICATION_PASSWORD
                  echo "$ISSUER_POSTGRES_NAME secret created."
                fi
              else
                echo "ssi-credential-issuer is disabled. Skipping $ISSUER_POSTGRES_NAME secret creation."
              fi

              #############################################################################
              ###### --- Script to create or update tx-data-provider secret --- ######
              if [ "$DATAPROVIDER_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$DATAPROVIDER_NAME secret..."
                PASSWORD_DATAPROVIDER="$DATAPROVIDER_PASSWORD"

                if kubectl get secret {{ .Release.Name }}-$DATAPROVIDER_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$DATAPROVIDER_NAME -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"password\":\"$PASSWORD_DATAPROVIDER\",
                          \"postgres-password\":\"$PASSWORD_DATAPROVIDER\"
                        }}"
                  echo "{{ .Release.Name }}-$DATAPROVIDER_NAME updated successfully."
                else
                  kubectl create secret generic {{ .Release.Name }}-$DATAPROVIDER_NAME -n {{ .Release.Namespace }} \
                    --from-literal=password="$PASSWORD_DATAPROVIDER" \
                    --from-literal=postgres-password="$PASSWORD_DATAPROVIDER"
                  echo "{{ .Release.Name }}-$DATAPROVIDER_NAME created successfully."
                fi
              else
                echo "tx-data-provider.enabled is false, skipping $DATAPROVIDER_NAME secret."
              fi

              #############################################################################
              ###### --- Script to create or update {{ .Release.Name }}-dataconsumer-1-db --- ######
              # if [ "$DATACONSUMER1_ENABLED" = "true" ]; then
              #   echo "dataconsumerOne is enabled is true. Checking/creating {{ .Release.Name }}-$DATACONSUMER1_NAME secret..."
              #   PASSWORD_DATACONSUMER="$DATACONSUMER1_PASSWORD"

              #   if kubectl get secret {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
              #     kubectl patch secret {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} \
              #       -p "{\"stringData\":{
              #             \"password\":\"$PASSWORD_DATACONSUMER\",
              #             \"postgres-password\":\"$PASSWORD_DATACONSUMER\"
              #           }}"
              #     echo "{{ .Release.Name }}-$DATACONSUMER1_NAME updated successfully."
              #   else
              #     kubectl create secret generic {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} \
              #       --from-literal=password="$PASSWORD_DATACONSUMER" \
              #       --from-literal=postgres-password="$PASSWORD_DATACONSUMER"
              #     echo "{{ .Release.Name }}-$DATACONSUMER1_NAME created successfully."
              #   fi
              # else
              #   echo "dataconsumerOne.enabled is false , skipping $DATACONSUMER1_NAME secret creation."
              # fi

              if [ "$DATACONSUMER1_ENABLED" = "true" ]; then
                echo "Checking/creating {{ .Release.Name }}-$DATACONSUMER1_NAME secret..."
                
                if kubectl get secret {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{\"password\":\"$DATACONSUMER1_PASSWORD\",\"postgres-password\":\"$DATACONSUMER1_PASSWORD\"}}"
                  echo "Secret updated successfully."
                else
                  kubectl create secret generic {{ .Release.Name }}-$DATACONSUMER1_NAME -n {{ .Release.Namespace }} \
                    --from-literal=password="$DATACONSUMER1_PASSWORD" \
                    --from-literal=postgres-password="$DATACONSUMER1_PASSWORD"
                  echo "Secret created successfully."
                fi

                # Patch Controlplane Deployment env variable
                kubectl set env deployment {{ .Release.Name }}-dataconsumer-edc-controlplane \
                  EDC_DATASOURCE_DEFAULT_PASSWORD="$DATACONSUMER1_PASSWORD" \
                  -n {{ .Release.Namespace }}

                # Patch Dataplane Deployment env variable
                kubectl set env deployment {{ .Release.Name }}-dataconsumer-edc-dataplane \
                  EDC_DATASOURCE_DEFAULT_PASSWORD="$DATACONSUMER1_PASSWORD" \
                  -n {{ .Release.Namespace }}

                # Restart both Deployments
                kubectl rollout restart deployment {{ .Release.Name }}-dataconsumer-edc-controlplane \
                  -n {{ .Release.Namespace }}
                kubectl rollout restart deployment {{ .Release.Name }}-dataconsumer-edc-dataplane \
                  -n {{ .Release.Namespace }}
              else
                echo "dataconsumerOne.enabled is false, skipping secret creation."
              fi
              
              #############################################################################
              ###### --- Script to create or update {{ .Release.Name }}-dataconsumer-2-db --- ######
              if [ "$DATACONSUMER2_ENABLED" = "true" ]; then
                echo "dataconsumerTwo is enabled true. Checking/creating {{ .Release.Name }}-$DATACONSUMER2_NAME secret..."
                PASSWORD_DATACONSUMER2="$DATACONSUMER2_PASSWORD"

                if kubectl get secret {{ .Release.Name }}-$DATACONSUMER2_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret {{ .Release.Name }}-$DATACONSUMER2_NAME -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"password\":\"$PASSWORD_DATACONSUMER2\",
                          \"postgres-password\":\"$PASSWORD_DATACONSUMER2\"
                        }}"
                  echo "{{ .Release.Name }}-$DATACONSUMER2_NAME updated successfully."
                else
                  kubectl create secret generic {{ .Release.Name }}-$DATACONSUMER2_NAME -n {{ .Release.Namespace }} \
                    --from-literal=password="$PASSWORD_DATACONSUMER2" \
                    --from-literal=postgres-password="$PASSWORD_DATACONSUMER2"
                  echo "{{ .Release.Name }}-$DATACONSUMER2_NAME created successfully."
                fi
              else
                echo "dataconsumerTwo.enabled is false, skipping $DATACONSUMER2_NAME secret creation."
              fi
              
              #############################################################################
              ##### dataprovider-dtr
              ###### --- Script to create or update dataprovider-secret-dtr-postgres-init --- ######
              echo "Checking/creating $DATAPROVIDER_DTR_NAME..."
              PASSWORD_DATAPROVIDER_DTR="$DATAPROVIDER_DTR_PASSWORD"

              # Debug print to ensure the variable is correct
              echo "DATAPROVIDER_ENABLED='$DATAPROVIDER_ENABLED'"

              if [ "$DATAPROVIDER_ENABLED" = "true" ]; then
                if kubectl get secret "$DATAPROVIDER_DTR_NAME" -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  echo "Secret $DATAPROVIDER_DTR_NAME exists — patching..."
                  kubectl patch secret "$DATAPROVIDER_DTR_NAME" \
                    -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"SPRING_DATASOURCE_PASSWORD\":\"$PASSWORD_DATAPROVIDER_DTR\",
                          \"password\":\"$PASSWORD_DATAPROVIDER_DTR\",
                          \"postgres-password\":\"$PASSWORD_DATAPROVIDER_DTR\"
                        }}"
                  echo "$DATAPROVIDER_DTR_NAME patched successfully."
                else
                  echo "Secret $DATAPROVIDER_DTR_NAME does not exist — creating..."
                  kubectl create secret generic "$DATAPROVIDER_DTR_NAME" \
                    -n {{ .Release.Namespace }} \
                    --from-literal=SPRING_DATASOURCE_PASSWORD="$PASSWORD_DATAPROVIDER_DTR" \
                    --from-literal=password="$PASSWORD_DATAPROVIDER_DTR" \
                    --from-literal=postgres-password="$PASSWORD_DATAPROVIDER_DTR"
                  echo "$DATAPROVIDER_DTR_NAME created successfully."
                fi
              else
                echo "Skipping $DATAPROVIDER_DTR_NAME — tx-data-provider enabled is false."
              fi   
                              
              #############################################################################
{{- end }}
