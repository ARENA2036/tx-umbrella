
#  Job to create secret for update secret
apiVersion: batch/v1
kind: Job
metadata:
  name: update-umbrella-secret
  name: "{{ .Release.Name }}-update-umbrella-secret"
  namespace: {{ .Release.Namespace }}
  annotations:
    # "helm.sh/hook": pre-install
    # "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "5"
    redeploy-timestamp: "{{ now | unixEpoch }}"
spec:
  ttlSecondsAfterFinished: 180  # Delete 3 minutes after completion
  template:
    spec:
      serviceAccountName: secret-manager-sa
      restartPolicy: OnFailure
      containers:
        - name: update-secret
          image: bitnami/kubectl:1.28
          env:
            ##### sharedidp
            - name: SHAREDIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_ADMIN_PASSWORD }}"
            ##### centralidp
            - name: CENTRALIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_ADMIN_PASSWORD }}"
            ##### sharedidp-postgresql
            - name: SHAREDIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_PG_PASSWORD }}"
            ##### centralidp-postgresql
            - name: CENTRALIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_PG_PASSWORD }}"
            ##### bpdm-postgres
            - name: BPDM_PG_PASSWORD
              value: "{{ .Values.secretEnv.BPDM_PG_PASSWORD }}"
            ##### issuer-postgresql 
            - name: UMBRELLA_ISSUER_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_POSTGRES_PASSWORD }}"
            - name: UMBRELLA_ISSUER_REPLICATION_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_REPLICATION_PASSWORD }}"
            ##### portal-backend-postgresql 
            - name: PORTAL_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.PORTAL_POSTGRES_PASSWORD }}"
            ##### pgadmin4@
            - name: PGADMIN_PASSWORD
              value: "{{ .Values.secretEnv.PGADMIN_PASSWORD }}"
            ##### discoveryfinder-postgresql
            - name: DISCOVERYFINDER_PASSWORD
              value: "{{ .Values.secretEnv.DISCOVERYFINDER_PASSWORD }}"
            ##### bpndiscovery-postgresql
            - name: BPNDISCOVERY_PASSWORD
              value: "{{ .Values.secretEnv.BPNDISCOVERY_PASSWORD }}"
            ##### dataprovider
            - name: DATAPROVIDER_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_PASSWORD }}"
            ##### dataconsumer-1-db
            - name: DATACONSUMER1_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER1_PASSWORD }}"
            ##### dataconsumer-2-db
            - name: DATACONSUMER2_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER2_PASSWORD }}"
            ##### dataprovider-dtr
            - name: DATAPROVIDER_DTR_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_DTR_PASSWORD }}"
            ##### cx-operator_Password_Change
            - name: CX_USER_PASSWORD
              value: "{{ .Values.secretEnv.CX_USER_PASSWORD }}"
            ##### serviceAccount
            - name: SA_CL1_REG_2
              value: "{{ .Values.secretEnv.SA_CL1_REG_2 }}"
            - name: SA_CLI2_01
              value: "{{ .Values.secretEnv.SA_CLI2_01 }}"
            - name: SA_CLI2_02
              value: "{{ .Values.secretEnv.SA_CLI2_02 }}"
            - name: SA_CLI2_03
              value: "{{ .Values.secretEnv.SA_CLI2_03 }}"
            - name: SA_CLI2_04
              value: "{{ .Values.secretEnv.SA_CLI2_04 }}"
            - name: SA_CLI2_05
              value: "{{ .Values.secretEnv.SA_CLI2_05 }}"
            - name: SA_CL3_CX_1
              value: "{{ .Values.secretEnv.SA_CL3_CX_1 }}"
            - name: SA_CL5_CUSTODIAN_2
              value: "{{ .Values.secretEnv.SA_CL5_CUSTODIAN_2 }}"
            - name: SA_CL7_CX_1
              value: "{{ .Values.secretEnv.SA_CL7_CX_1 }}"
            - name: SA_CL7_CX_5
              value: "{{ .Values.secretEnv.SA_CL7_CX_5 }}"
            - name: SA_CL7_CX_7
              value: "{{ .Values.secretEnv.SA_CL7_CX_7 }}"
            - name: SA_CL8_CX_1
              value: "{{ .Values.secretEnv.SA_CL8_CX_1 }}"
            - name: SA_CL21_01
              value: "{{ .Values.secretEnv.SA_CL21_01 }}"
            - name: SA_CL22_01
              value: "{{ .Values.secretEnv.SA_CL22_01 }}"
            - name: SA_CL24_01
              value: "{{ .Values.secretEnv.SA_CL24_01 }}"
            - name: SA_CL25_CX_1
              value: "{{ .Values.secretEnv.SA_CL25_CX_1 }}"
            - name: SA_CL25_CX_2
              value: "{{ .Values.secretEnv.SA_CL25_CX_2 }}"
            - name: SA_CL25_CX_3
              value: "{{ .Values.secretEnv.SA_CL25_CX_3 }}"
            ##### extra service accounts
            - name: SA_SATEST01
              value: "{{ .Values.secretEnv.SA_SATEST01 }}"
            - name: SA_SATEST02
              value: "{{ .Values.secretEnv.SA_SATEST02 }}"
            - name: SA_SATEST03
              value: "{{ .Values.secretEnv.SA_SATEST03 }}"
            - name: SA_SATEST04
              value: "{{ .Values.secretEnv.SA_SATEST04 }}"
            - name: SA_SATEST05
              value: "{{ .Values.secretEnv.SA_SATEST05 }}"
            - name: SA_SATEST06
              value: "{{ .Values.secretEnv.SA_SATEST06 }}"
            - name: SA_SATEST07
              value: "{{ .Values.secretEnv.SA_SATEST07 }}"
            - name: SA_SATEST08
              value: "{{ .Values.secretEnv.SA_SATEST08 }}"
            - name: SA_SATEST09
              value: "{{ .Values.secretEnv.SA_SATEST09 }}"
            - name: SA_SATEST10
              value: "{{ .Values.secretEnv.SA_SATEST10 }}"
            - name: SA_SATEST11
              value: "{{ .Values.secretEnv.SA_SATEST11 }}"
            - name: SA_SATEST12
              value: "{{ .Values.secretEnv.SA_SATEST12 }}"
            - name: SA_SATEST13
              value: "{{ .Values.secretEnv.SA_SATEST13 }}"
            - name: SA_SATEST14
              value: "{{ .Values.secretEnv.SA_SATEST14 }}"
            - name: SA_SATEST15
              value: "{{ .Values.secretEnv.SA_SATEST15 }}"
            - name: SA_SATEST16
              value: "{{ .Values.secretEnv.SA_SATEST16 }}"
            - name: SA_SATEST17
              value: "{{ .Values.secretEnv.SA_SATEST17 }}"
            - name: SA_SATEST18
              value: "{{ .Values.secretEnv.SA_SATEST18 }}"
            - name: SA_SATEST19
              value: "{{ .Values.secretEnv.SA_SATEST19 }}"
            - name: SA_SATEST20
              value: "{{ .Values.secretEnv.SA_SATEST20 }}"
            - name: SA_SATEST21
              value: "{{ .Values.secretEnv.SA_SATEST21 }}"
            - name: SA_SATEST22
              value: "{{ .Values.secretEnv.SA_SATEST22 }}"
           ##### portal-backend-keycloak
            - name: SAME_SA_CL1_REG_2
              value: "{{ .Values.secretEnv.SAME_SA_CL1_REG_2 }}"
            - name: SA_CL1_REG_1
              value: "{{ .Values.secretEnv.SA_CL1_REG_1 }}"
           ##### master service Accounts 
            - name: SA_CX_OPERATOR
              value: "{{ .Values.secretEnv.SA_CX_OPERATOR }}"
            - name: SA_PROVISIONING
              value: "{{ .Values.secretEnv.SA_PROVISIONING }}"
            ##### discovery finder Client Secret
            - name: AUTHORIZATION_GRANT_TYPE
              value: "{{ .Values.secretEnv.AUTHORIZATION_GRANT_TYPE }}"
            ##### umbrella ssi credential issuer
            - name: PORTAL_CLIENT_SECRET
              value: "{{ .Values.secretEnv.PORTAL_CLIENT_SECRET }}"
            ##### umbrella-ssi-credential-issuer
            - name: WALLET_CLIENT_SECRET
              value: "{{ .Values.secretEnv.WALLET_CLIENT_SECRET }}"
            ##### ssi-dim-wallet-secret
            - name: SSI_PORTAL_CLIENT_SECRET
              value: "{{ .Values.secretEnv.SSI_PORTAL_CLIENT_SECRET }}"            
            ##### portal-backend-interfaces
            - name: PORTAL_BACKEND_CLIENT_SECRET
              value: "{{ .Values.secretEnv.PORTAL_BACKEND_CLIENT_SECRET }}"
            - name: ISSUERCOMPONENT_CLIENT_SECRET
              value: "{{ .Values.secretEnv.ISSUERCOMPONENT_CLIENT_SECRET }}"
            - name: CUSTODIAN_CLIENT_SECRET
              value: "{{ .Values.secretEnv.CUSTODIAN_CLIENT_SECRET }}"
            - name: SDFACTORY_ADDRESS
              value: "{{ .Values.secretEnv.SDFACTORY_ADDRESS }}"
            - name: OFFERPROVIDER_CLIENT_SECRET
              value: "{{ .Values.secretEnv.OFFERPROVIDER_CLIENT_SECRET }}"
            - name: BPDM_CLIENT_SECRET
              value: "{{ .Values.secretEnv.BPDM_CLIENT_SECRET }}"
            ##### umbrella-centralidp-clients
            - name: MIW
              value: "{{ .Values.secretEnv.MIW }}"
            - name: BPDM
              value: "{{ .Values.secretEnv.BPDM }}"
            - name: BPDMGATE
              value: "{{ .Values.secretEnv.BPDMGATE }}"
            - name: BPDMORCHESTRATOR
              value: "{{ .Values.secretEnv.BPDMORCHESTRATOR }}"

          command:
            - /bin/sh
            - -c
            - |

              #############################################################################
              ##### sharedidp
              ###### --- Script to sharedidp --- ######
              echo "Checking/creating umbrella-sharedidp secret..."
              if kubectl get secret umbrella-sharedidp -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp -n {{ .Release.Namespace }} -p "{\"stringData\":{\"admin-password\":\"$SHAREDIDP_ADMIN_PASSWORD\"}}"
                echo "umbrella-sharedidp updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp -n {{ .Release.Namespace }} --from-literal=admin-password=$SHAREDIDP_ADMIN_PASSWORD
                echo "umbrella-sharedidp created successfully."
              fi
              
              #############################################################################

              ##### centralidp
              ###### --- Script to centralidp --- ######
              echo "Checking/creating umbrella-centralidp secret..."
              if kubectl get secret umbrella-centralidp -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-centralidp -n {{ .Release.Namespace }} -p "{\"stringData\":{\"admin-password\":\"$CENTRALIDP_ADMIN_PASSWORD\"}}"
                echo "umbrella-centralidp updated successfully."
              else
                kubectl create secret generic umbrella-centralidp -n {{ .Release.Namespace }} --from-literal=admin-password=$CENTRALIDP_ADMIN_PASSWORD
                echo "umbrella-centralidp created successfully."
              fi

              #############################################################################
              ##### sharedidp-postgresql
              ###### --- Script to sharedidp-postgresql --- ######
              echo "Checking/creating umbrella-sharedidp-postgresql secret..."
              if kubectl get secret umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$SHAREDIDP_PG_PASSWORD\",\"postgres-password\":\"$SHAREDIDP_PG_PASSWORD\"}}"
                echo "umbrella-sharedidp-postgresql updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} --from-literal=password=$SHAREDIDP_PG_PASSWORD --from-literal=postgres-password=$SHAREDIDP_PG_PASSWORD
                echo "umbrella-sharedidp-postgresql created successfully."
              fi

              #############################################################################
              ##### centralidp-postgresql
              ###### --- Script to centralidp-postgresql --- ######
              if kubectl get secret umbrella-centralidp-postgresql -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-centralidp-postgresql -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$CENTRALIDP_PG_PASSWORD\",\"postgres-password\":\"$CENTRALIDP_PG_PASSWORD\"}}"
                echo "umbrella-centralidp-postgresql updated successfully."
              else
                kubectl create secret generic umbrella-centralidp-postgresql -n {{ .Release.Namespace }} --from-literal=password=$CENTRALIDP_PG_PASSWORD --from-literal=postgres-password=$CENTRALIDP_PG_PASSWORD
                echo "umbrella-centralidp-postgresql created successfully."
              fi

              #############################################################################
              ##### bpdm-postgres
              ###### --- Script to bpdm-postgres --- ######
              echo "Checking/creating bpdm-postgres secret..."
              if kubectl get secret bpdm-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret bpdm-postgres -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$BPDM_PG_PASSWORD\",\"postgres-password\":\"$BPDM_PG_PASSWORD\"}}"
                echo "bpdm-postgres updated successfully."
              else
                kubectl create secret generic bpdm-postgres -n {{ .Release.Namespace }} --from-literal=password=$BPDM_PG_PASSWORD --from-literal=postgres-password=$BPDM_PG_PASSWORD
                echo "bpdm-postgres created successfully."
              fi
              #############################################################################
              ##### issuer-postgresql
              ###### --- Script to update umbrella-issuer-postgres --- ######
              echo "Waiting for secret umbrella-issuer-postgres to exist..."
              while ! kubectl get secret umbrella-issuer-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Secret exists. Updating passwords..."
              POSTGRES_PASSWORD="$UMBRELLA_ISSUER_POSTGRES_PASSWORD"
              REPLICATION_PASSWORD="$UMBRELLA_ISSUER_REPLICATION_PASSWORD"

              kubectl patch secret umbrella-issuer-postgres \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"postgres-password\":\"$POSTGRES_PASSWORD\",
                      \"password\":\"$POSTGRES_PASSWORD\",
                      \"replication-password\":\"$REPLICATION_PASSWORD\"
                  }}"

              echo "umbrella-issuer-postgres secret updated successfully."

              #############################################################################
              ##### portal-backend-postgresql
              ##### --- Script to update portal-postgres secret --- #####
              echo "Waiting for secret portal-postgres to exist..."
                  while ! kubectl get secret portal-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                    echo "Secret portal-postgres not found yet. Waiting 5s..."
                    sleep 5
                  done

                  echo "Updating portal-postgres passwords..."
                  PORTAL_PASSWORD="$PORTAL_POSTGRES_PASSWORD"

                  kubectl patch secret portal-postgres \
                    -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"postgres-password\":\"$PORTAL_PASSWORD\",
                          \"portal-password\":\"$PORTAL_PASSWORD\",
                          \"replication-password\":\"$PORTAL_PASSWORD\",
                          \"provisioning-password\":\"$PORTAL_PASSWORD\"
                        }}"

                  echo "portal-postgres secret updated successfully."
                
              #############################################################################
              ##### pgadmin4@
              ###### --- Script to update umbrella-pgadmin4 --- ######
              echo "Waiting for secret umbrella-pgadmin4 to exist..."
              while ! kubectl get secret umbrella-pgadmin4 -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret umbrella-pgadmin4 not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating umbrella-pgadmin4 passwords..."
              PGADMIN_PASSWORD="$PGADMIN_PASSWORD"

              kubectl patch secret umbrella-pgadmin4 \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"password\":\"$PGADMIN_PASSWORD\"
                    }}"

              echo "umbrella-pgadmin4 secret updated successfully."
            
              #############################################################################
              #####discoveryfinder-postgresql
              ######--- Script to update secret-discoveryfinder-postgres-init --- ######
              echo "Waiting for secret secret-discoveryfinder-postgres-init to exist..."
              while ! kubectl get secret secret-discoveryfinder-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating secret-discoveryfinder-postgres-init..."
              PASSWORD="$DISCOVERYFINDER_PASSWORD"

              kubectl patch secret secret-discoveryfinder-postgres-init \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"SPRING_DATASOURCE_PASSWORD\":\"$PASSWORD\",
                      \"password\":\"$PASSWORD\",
                      \"postgres-password\":\"$PASSWORD\"
                    }}"

              echo "secret-discoveryfinder-postgres-init updated successfully."

              #############################################################################
              ##### bpndiscovery-postgresql
              ###### --- Script to update secret-bpndiscovery-postgres-init  --- ######
              echo "Waiting for secret secret-bpndiscovery-postgres-init to exist..."
              while ! kubectl get secret secret-bpndiscovery-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating secret-bpndiscovery-postgres-init..."
              PASSWORD_BPN="$BPNDISCOVERY_PASSWORD"

              kubectl patch secret secret-bpndiscovery-postgres-init \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"SPRING_DATASOURCE_PASSWORD\":\"$PASSWORD_BPN\",
                      \"password\":\"$PASSWORD_BPN\",
                      \"postgres-password\":\"$PASSWORD_BPN\"
                    }}"

              echo "secret-bpndiscovery-postgres-init updated successfully."

              #############################################################################
              ##### dataprovider
              ###### --- Script to create or update umbrella-dataprovider-db --- ######
              echo "Checking/creating umbrella-dataprovider-db secret..."
              PASSWORD_DATAPROVIDER="$DATAPROVIDER_PASSWORD"

              if kubectl get secret umbrella-dataprovider-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataprovider-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATAPROVIDER\",
                        \"postgres-password\":\"$PASSWORD_DATAPROVIDER\"
                      }}"
                echo "umbrella-dataprovider-db updated successfully."
              else
                kubectl create secret generic umbrella-dataprovider-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATAPROVIDER \
                  --from-literal=postgres-password=$PASSWORD_DATAPROVIDER
                echo "umbrella-dataprovider-db created successfully."
              fi

              #############################################################################
              ##### dataconsumer-1-db
              ###### --- Script to create or update umbrella-dataconsumer-1-db --- ######
              echo "Checking/creating umbrella-dataconsumer-1-db secret..."
              PASSWORD_DATACONSUMER="$DATACONSUMER1_PASSWORD"

              if kubectl get secret umbrella-dataconsumer-1-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataconsumer-1-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATACONSUMER\",
                        \"postgres-password\":\"$PASSWORD_DATACONSUMER\"
                      }}"
                echo "umbrella-dataconsumer-1-db updated successfully."
              else
                kubectl create secret generic umbrella-dataconsumer-1-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATACONSUMER \
                  --from-literal=postgres-password=$PASSWORD_DATACONSUMER
                echo "umbrella-dataconsumer-1-db created successfully."
              fi

              #############################################################################
              ##### dataconsumer-2-db
              ###### --- Script to create or update umbrella-dataconsumer-2-db  --- ######
              echo "Checking/creating umbrella-dataconsumer-2-db secret..."
              PASSWORD_DATACONSUMER2="$DATACONSUMER2_PASSWORD"

              if kubectl get secret umbrella-dataconsumer-2-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataconsumer-2-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATACONSUMER2\",
                        \"postgres-password\":\"$PASSWORD_DATACONSUMER2\"
                      }}"
                echo "umbrella-dataconsumer-2-db updated successfully."
              else
                kubectl create secret generic umbrella-dataconsumer-2-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATACONSUMER2 \
                  --from-literal=postgres-password=$PASSWORD_DATACONSUMER2
                echo "umbrella-dataconsumer-2-db created successfully."
              fi

              #############################################################################
              ##### dataprovider-dtr
              ###### --- Script to create or update dataprovider-secret-dtr-postgres-init --- ######
              echo "Checking/creating dataprovider-secret-dtr-postgres-init..."
              PASSWORD_DATAPROVIDER_DTR="$DATAPROVIDER_DTR_PASSWORD"

              if kubectl get secret dataprovider-secret-dtr-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret dataprovider-secret-dtr-postgres-init \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATAPROVIDER_DTR\",
                        \"postgres-password\":\"$PASSWORD_DATAPROVIDER_DTR\"
                      }}"
                echo "dataprovider-secret-dtr-postgres-init updated successfully."
              else
                kubectl create secret generic dataprovider-secret-dtr-postgres-init \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATAPROVIDER_DTR \
                  --from-literal=postgres-password=$PASSWORD_DATAPROVIDER_DTR
                echo "dataprovider-secret-dtr-postgres-init created successfully."
              fi

              #############################################################################
              ##### realmSeeding
              ###### --- Script to create or update umbrella-sharedidp-cx-operator-realm-seeding--- ######
              echo "Checking/creating umbrella-sharedidp-cx-operator-realm-seeding..."
              CX_CHANGE_PASSWORD="$CX_USER_PASSWORD"

              if kubectl get secret umbrella-sharedidp-cx-operator-realm-seeding -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp-cx-operator-realm-seeding \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"initial-user-password\":\"$CX_CHANGE_PASSWORD\"
                      }}"
                echo "umbrella-sharedidp-cx-operator-realm-seeding updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp-cx-operator-realm-seeding \
                  -n {{ .Release.Namespace }} \
                  --from-literal=initial-user-password=$CX_CHANGE_PASSWORD \
                echo "umbrella-sharedidp-cx-operator-realm-seeding created successfully."
              fi

            
              #############################################################################
              ##### --- Script to create or update umbrella-centralidp-base-service-accounts --- ######
              echo "Checking/creating umbrella-centralidp-base-service-accounts secret..."

                if kubectl get secret umbrella-centralidp-base-service-accounts -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                  kubectl patch secret umbrella-centralidp-base-service-accounts -n {{ .Release.Namespace }} \
                    --type merge \
                    -p "{\"stringData\":{
                         \"sa-cl1-reg-2\":\"$SA_CL1_REG_2\",
                          \"sa-cl2-01\":\"$SA_CLI2_01\",
                          \"sa-cl2-02\":\"$SA_CLI2_02\",
                          \"sa-cl2-03\":\"$SA_CLI2_03\",
                          \"sa-cl2-04\":\"$SA_CLI2_04\",
                          \"sa-cl2-05\":\"$SA_CLI2_05\",
                          \"sa-cl3-cx-1\":\"$SA_CL3_CX_1\",
                          \"sa-cl5-custodian-2\":\"$SA_CL5_CUSTODIAN_2\",
                          \"sa-cl7-cx-1\":\"$SA_CL7_CX_1\",
                          \"sa-cl7-cx-5\":\"$SA_CL7_CX_5\",
                          \"sa-cl7-cx-7\":\"$SA_CL7_CX_7\",
                          \"sa-cl8-cx-1\":\"$SA_CL8_CX_1\",
                          \"sa-cl21-01\":\"$SA_CL21_01\",
                          \"sa-cl22-01\":\"$SA_CL22_01\",
                          \"sa-cl24-01\":\"$SA_CL24_01\",
                          \"sa-cl25-cx-1\":\"$SA_CL25_CX_1\",
                          \"sa-cl25-cx-2\":\"$SA_CL25_CX_2\",
                          \"sa-cl25-cx-3\":\"$SA_CL25_CX_3\"
                        }}"
                  echo "Secrets updated successfully."
                else
                  kubectl create secret generic umbrella-centralidp-base-service-accounts -n {{ .Release.Namespace }} \
                    --from-literal=sa-cl1-reg-2=$SA_CL1_REG_2 \
                    --from-literal=sa-cl2-01=$SA_CLI2_01 \
                    --from-literal=sa-cl2-02=$SA_CLI2_02 \
                    --from-literal=sa-cl2-03=$SA_CLI2_03 \
                    --from-literal=sa-cl2-04=$SA_CLI2_04 \
                    --from-literal=sa-cl2-05=$SA_CLI2_05 \
                    --from-literal=sa-cl3-cx-1=$SA_CL3_CX_1 \
                    --from-literal=sa-cl5-custodian-2=$SA_CL5_CUSTODIAN_2 \
                    --from-literal=sa-cl7-cx-1=$SA_CL7_CX_1 \
                    --from-literal=sa-cl7-cx-5=$SA_CL7_CX_5 \
                    --from-literal=sa-cl7-cx-7=$SA_CL7_CX_7 \
                    --from-literal=sa-cl8-cx-1=$SA_CL8_CX_1 \
                    --from-literal=sa-cl21-01=$SA_CL21_01 \
                    --from-literal=sa-cl22-01=$SA_CL22_01 \
                    --from-literal=sa-cl24-01=$SA_CL24_01 \
                    --from-literal=sa-cl25-cx-1=$SA_CL25_CX_1 \
                    --from-literal=sa-cl25-cx-2=$SA_CL25_CX_2 \
                    --from-literal=sa-cl25-cx-3=$SA_CL25_CX_3
                  echo "Secrets created successfully."
                fi

              #############################################################################
           
              ##### --- Script to create or update umbrella-centralidp-extra-service-accounts --- ######
              echo "Checking/creating umbrella-centralidp-extra-service-accounts secret..."

              if kubectl get secret umbrella-centralidp-extra-service-accounts -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-centralidp-extra-service-accounts -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"satest01\":\"$SA_SATEST01\",
                        \"satest02\":\"$SA_SATEST02\",
                        \"satest03\":\"$SA_SATEST03\",
                        \"satest04\":\"$SA_SATEST04\",
                        \"satest05\":\"$SA_SATEST05\",
                        \"satest06\":\"$SA_SATEST06\",
                        \"satest07\":\"$SA_SATEST07\",
                        \"satest08\":\"$SA_SATEST08\",
                        \"satest09\":\"$SA_SATEST09\",
                        \"satest10\":\"$SA_SATEST10\",
                        \"satest11\":\"$SA_SATEST11\",
                        \"satest12\":\"$SA_SATEST12\",
                        \"satest13\":\"$SA_SATEST13\",
                        \"satest14\":\"$SA_SATEST14\",
                        \"satest15\":\"$SA_SATEST15\",
                        \"satest16\":\"$SA_SATEST16\",
                        \"satest17\":\"$SA_SATEST17\",
                        \"satest18\":\"$SA_SATEST18\",
                        \"satest19\":\"$SA_SATEST19\",
                        \"satest20\":\"$SA_SATEST20\",
                        \"satest21\":\"$SA_SATEST21\",
                        \"satest22\":\"$SA_SATEST22\"
                      }}"
                echo "umbrella-centralidp-extra-service-accounts secret updated."
              else
                kubectl create secret generic umbrella-centralidp-extra-service-accounts -n {{ .Release.Namespace }} \
                  --from-literal=satest01=$SA_SATEST01 \
                  --from-literal=satest02=$SA_SATEST02 \
                  --from-literal=satest03=$SA_SATEST03 \
                  --from-literal=satest04=$SA_SATEST04 \
                  --from-literal=satest05=$SA_SATEST05 \
                  --from-literal=satest06=$SA_SATEST06 \
                  --from-literal=satest07=$SA_SATEST07 \
                  --from-literal=satest08=$SA_SATEST08 \
                  --from-literal=satest09=$SA_SATEST09 \
                  --from-literal=satest10=$SA_SATEST10 \
                  --from-literal=satest11=$SA_SATEST11 \
                  --from-literal=satest12=$SA_SATEST12 \
                  --from-literal=satest13=$SA_SATEST13 \
                  --from-literal=satest14=$SA_SATEST14 \
                  --from-literal=satest15=$SA_SATEST15 \
                  --from-literal=satest16=$SA_SATEST16 \
                  --from-literal=satest17=$SA_SATEST17 \
                  --from-literal=satest18=$SA_SATEST18 \
                  --from-literal=satest19=$SA_SATEST19 \
                  --from-literal=satest20=$SA_SATEST20 \
                  --from-literal=satest21=$SA_SATEST21 \
                  --from-literal=satest22=$SA_SATEST22
                echo "umbrella-centralidp-extra-service-accounts secret created."
              fi

              #############################################################################
              ##### --- Script to create or update portal-backend-keycloak --- ######
              echo "Checking/creating portal-backend-keycloak secret..."

              if kubectl get secret portal-backend-keycloak -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret portal-backend-keycloak -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"central-client-secret\":\"$SAME_SA_CL1_REG_2\",
                        \"shared-client-secret\":\"$SA_CL1_REG_1\"
                      }}"
                echo "portal-backend-keycloak secret updated."
              else
                kubectl create secret generic portal-backend-keycloak -n {{ .Release.Namespace }} 
                  --from-literal=central-client-secret=$SAME_SA_CL1_REG_2 \
                  --from-literal=shared-client-secret=$SA_CL1_REG_1

                echo "portal-backend-keycloak secret created."
              fi

              #############################################################################
              ##### --- Script to create or update umbrella-sharedidp-master-realm-seeding --- ######
              echo "Checking/creating umbrella-sharedidp-master-realm-seeding secret..."
              if kubectl get secret umbrella-sharedidp-master-realm-seeding -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp-master-realm-seeding -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"sa-cx-operator\":\"$SA_CX_OPERATOR\",
                        \"sa-provisioning\":\"$SA_PROVISIONING\"
                      }}"
                echo "umbrella-sharedidp-master-realm-seeding Secret updated."
              else
                kubectl create secret generic umbrella-sharedidp-master-realm-seeding \
                  -n {{ .Release.Namespace }} \
                  --from-literal=sa-cx-operator=$SA_CX_OPERATOR \
                  --from-literal=sa-provisioning=$SA_PROVISIONING
                echo "umbrella-sharedidp-master-realm-seeding Secret created."
              fi

              #############################################################################
              ##### --- Script to create or update umbrella-bpndiscovery --- ######
              echo "Checking/creating umbrella-bpndiscovery secret..."
              if kubectl get secret umbrella-bpndiscovery -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-bpndiscovery -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DISCOVERYFINDER_CLIENT_AUTHORIZATION_GRANT_TYPE\":\"$AUTHORIZATION_GRANT_TYPE\"
                      }}"
                echo "umbrella-bpndiscovery Secret updated."
              else
                kubectl create secret generic umbrella-bpndiscovery \
                  -n {{ .Release.Namespace }} \
                  --from-literal=SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DISCOVERYFINDER_CLIENT_AUTHORIZATION_GRANT_TYPE=$AUTHORIZATION_GRANT_TYPE

                echo "umbrella-bpndiscovery Secret created."
              fi

              #############################################################################
              ##### --- Script to create or update umbrella-ssi-credential-issuer --- ######
              echo "Checking/creating umbrella-ssi-credential-issuer secret..."
              if kubectl get secret umbrella-ssi-credential-issuer -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-ssi-credential-issuer -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"portal-client-secret\":\"$PORTAL_CLIENT_SECRET\"
                      }}"
                echo "umbrella-ssi-credential-issuer Secret updated."
              else
                kubectl create secret generic umbrella-ssi-credential-issuer \
                  -n {{ .Release.Namespace }} \
                  --from-literal=portal-client-secret=$PORTAL_CLIENT_SECRET

                echo "umbrella-ssi-credential-issuer Secret created."
              fi

              #############################################################################
              ##### --- Script to create or update umbrella-ssi-credential-issuer --- ######
              echo "Checking/creating umbrella-ssi-credential-issuer secret..."
              if kubectl get secret umbrella-ssi-credential-issuer -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-ssi-credential-issuer -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"wallet-client-secret\":\"$WALLET_CLIENT_SECRET\"
                      }}"
                echo "umbrella-ssi-credential-issuer Secret updated."
              else
                kubectl create secret generic umbrella-ssi-credential-issuer \
                  -n {{ .Release.Namespace }} \
                  --from-literal=wallet-client-secret=$WALLET_CLIENT_SECRET
                echo "umbrella-ssi-credential-issuer Secret created."
              fi

              #############################################################################
              ##### --- Script to create or update ssi-dim-wallet-secret --- ######
              echo "Checking/creating ssi-dim-wallet-secret secret..."
              if kubectl get secret ssi-dim-wallet-secret -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret ssi-dim-wallet-secret -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"PORTAL_CLIENT_SECRET\":\"$SSI_PORTAL_CLIENT_SECRET\"
                      }}"
                echo "ssi-dim-wallet-secret Secret updated."
              else
                kubectl create secret generic ssi-dim-wallet-secret \
                  -n {{ .Release.Namespace }} \
                  --from-literal=PORTAL_CLIENT_SECRET=$SSI_PORTAL_CLIENT_SECRET
                echo "ssi-dim-wallet-secret Secret created."
              fi

              #############################################################################
              ##### --- Script to create or update portal-backend-interfaces --- ######
              echo "Checking/creating portal-backend-interfaces secret..."

              if kubectl get secret portal-backend-interfaces -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Secret exists. Patching values..."
                kubectl patch secret portal-backend-interfaces -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"dim-client-secret\":\"$PORTAL_BACKEND_CLIENT_SECRET\",
                        \"issuercomponent-client-secret\":\"$ISSUERCOMPONENT_CLIENT_SECRET\",
                        \"custodian-client-secret\":\"$CUSTODIAN_CLIENT_SECRET\",
                        \"sdfactory-client-secret\":\"$SDFACTORY_ADDRESS\",
                        \"offerprovider-client-secret\":\"$OFFERPROVIDER_CLIENT_SECRET\",
                         \"bpdm-client-secret\":\"$BPDM_CLIENT_SECRET\"
                      }}"
                echo "portal-backend-interfaces secret updated."
              else
                echo "Secret does not exist. Creating new secret..."
                kubectl create secret generic portal-backend-interfaces \
                  -n {{ .Release.Namespace }} \
                  --from-literal=dim-client-secret="$PORTAL_BACKEND_CLIENT_SECRET" \
                  --from-literal=issuercomponent-client-secret="$ISSUERCOMPONENT_CLIENT_SECRET" \
                  --from-literal=custodian-client-secret="$CUSTODIAN_CLIENT_SECRET" \
                  --from-literal=sdfactory-client-secret="$SDFACTORY_ADDRESS" \
                  --from-literal=offerprovider-client-secret="$OFFERPROVIDER_CLIENT_SECRET" \
                  --from-literal=bpdm-client-secret="$BPDM_CLIENT_SECRET"
                echo "portal-backend-interfaces secret created."
              fi

              #############################################################################
              ##### --- Script to create or update umbrella-centralidp-clients secret --- ######
              echo "Checking/creating umbrella-centralidp-clients secret..."

              if kubectl get secret umbrella-centralidp-clients -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Secret exists. Patching values..."
                kubectl patch secret umbrella-centralidp-clients -n {{ .Release.Namespace }} \
                  --type merge \
                  -p "{\"stringData\":{
                        \"miw\":\"$MIW\",
                        \"bpdm\":\"$BPDM\",
                        \"bpdm-gate\":\"$BPDMGATE\",
                        \"bpdm-orchestrator\":\"$BPDMORCHESTRATOR\"
                      }}"
                echo "umbrella-centralidp-clients secret updated."
              else
                echo "Secret does not exist. Creating new secret..."
                kubectl create secret generic umbrella-centralidp-clients \
                  -n {{ .Release.Namespace }} \
                  --from-literal=miw="$MIW" \
                  --from-literal=bpdm="$BPDM" \
                  --from-literal=bpdm-gate="$BPDMGATE" \
                  --from-literal=bpdm-orchestrator="$BPDMORCHESTRATOR"
                echo "umbrella-centralidp-clients secret created."
              fi
              #############################################################################