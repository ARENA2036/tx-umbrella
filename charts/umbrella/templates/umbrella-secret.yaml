
#  Job to create secret for update secret
apiVersion: batch/v1
kind: Job
metadata:
  name: update-umbrella-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    # "helm.sh/hook": pre-install
    # "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  ttlSecondsAfterFinished: 180  # Delete 3 minutes after completion
  template:
    spec:
      serviceAccountName: secret-manager-sa
      restartPolicy: OnFailure
      containers:
        - name: update-secret
          image: bitnami/kubectl:1.28
          env:
            ##### sharedidp
            - name: SHAREDIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_ADMIN_PASSWORD }}"
            ##### centralidp
            - name: CENTRALIDP_ADMIN_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_ADMIN_PASSWORD }}"
            ##### sharedidp-postgresql
            - name: SHAREDIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.SHAREDIDP_PG_PASSWORD }}"
            ##### centralidp-postgresql
            - name: CENTRALIDP_PG_PASSWORD
              value: "{{ .Values.secretEnv.CENTRALIDP_PG_PASSWORD }}"
            ##### bpdm-postgres
            - name: BPDM_PG_PASSWORD
              value: "{{ .Values.secretEnv.BPDM_PG_PASSWORD }}"
            ##### issuer-postgresql 
            - name: UMBRELLA_ISSUER_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_POSTGRES_PASSWORD }}"
            - name: UMBRELLA_ISSUER_REPLICATION_PASSWORD
              value: "{{ .Values.secretEnv.UMBRELLA_ISSUER_REPLICATION_PASSWORD }}"
            ##### portal-backend-postgresql 
            - name: PORTAL_POSTGRES_PASSWORD
              value: "{{ .Values.secretEnv.PORTAL_POSTGRES_PASSWORD }}"
            ##### pgadmin4@
            - name: PGADMIN_PASSWORD
              value: "{{ .Values.secretEnv.PGADMIN_PASSWORD }}"
            ##### discoveryfinder-postgresql
            - name: DISCOVERYFINDER_PASSWORD
              value: "{{ .Values.secretEnv.DISCOVERYFINDER_PASSWORD }}"
            ##### bpndiscovery-postgresql
            - name: BPNDISCOVERY_PASSWORD
              value: "{{ .Values.secretEnv.BPNDISCOVERY_PASSWORD }}"
            ##### dataprovider
            - name: DATAPROVIDER_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_PASSWORD }}"
            ##### dataconsumer-1-db
            - name: DATACONSUMER1_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER1_PASSWORD }}"
            ##### dataconsumer-2-db
            - name: DATACONSUMER2_PASSWORD
              value: "{{ .Values.secretEnv.DATACONSUMER2_PASSWORD }}"
            ##### dataprovider-dtr
            - name: DATAPROVIDER_DTR_PASSWORD
              value: "{{ .Values.secretEnv.DATAPROVIDER_DTR_PASSWORD }}"
            ##### cx-operator_Password_Change
            - name: CX_USER_PASSWORD
              value: "{{ .Values.secretEnv.CX_USER_PASSWORD }}"
              
          command:
            - /bin/sh
            - -c
            - |

              #############################################################################
              ##### sharedidp
              ###### --- Script to sharedidp --- ######
              echo "Checking/creating umbrella-sharedidp secret..."
              if kubectl get secret umbrella-sharedidp -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp -n {{ .Release.Namespace }} -p "{\"stringData\":{\"admin-password\":\"$SHAREDIDP_ADMIN_PASSWORD\"}}"
                echo "umbrella-sharedidp updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp -n {{ .Release.Namespace }} --from-literal=admin-password=$SHAREDIDP_ADMIN_PASSWORD
                echo "umbrella-sharedidp created successfully."
              fi
              
              #############################################################################

              ##### centralidp
              ###### --- Script to centralidp --- ######
              echo "Checking/creating umbrella-centralidp secret..."
              if kubectl get secret umbrella-centralidp -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-centralidp -n {{ .Release.Namespace }} -p "{\"stringData\":{\"admin-password\":\"$CENTRALIDP_ADMIN_PASSWORD\"}}"
                echo "umbrella-centralidp updated successfully."
              else
                kubectl create secret generic umbrella-centralidp -n {{ .Release.Namespace }} --from-literal=admin-password=$CENTRALIDP_ADMIN_PASSWORD
                echo "umbrella-centralidp created successfully."
              fi

              #############################################################################
              ##### sharedidp-postgresql
              ###### --- Script to sharedidp-postgresql --- ######
              echo "Checking/creating umbrella-sharedidp-postgresql secret..."
              if kubectl get secret umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$SHAREDIDP_PG_PASSWORD\",\"postgres-password\":\"$SHAREDIDP_PG_PASSWORD\"}}"
                echo "umbrella-sharedidp-postgresql updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp-postgresql -n {{ .Release.Namespace }} --from-literal=password=$SHAREDIDP_PG_PASSWORD --from-literal=postgres-password=$SHAREDIDP_PG_PASSWORD
                echo "umbrella-sharedidp-postgresql created successfully."
              fi

              #############################################################################
              ##### centralidp-postgresql
              ###### --- Script to centralidp-postgresql --- ######
              if kubectl get secret umbrella-centralidp-postgresql -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-centralidp-postgresql -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$CENTRALIDP_PG_PASSWORD\",\"postgres-password\":\"$CENTRALIDP_PG_PASSWORD\"}}"
                echo "umbrella-centralidp-postgresql updated successfully."
              else
                kubectl create secret generic umbrella-centralidp-postgresql -n {{ .Release.Namespace }} --from-literal=password=$CENTRALIDP_PG_PASSWORD --from-literal=postgres-password=$CENTRALIDP_PG_PASSWORD
                echo "umbrella-centralidp-postgresql created successfully."
              fi

              #############################################################################
              ##### bpdm-postgres
              ###### --- Script to bpdm-postgres --- ######
              echo "Checking/creating bpdm-postgres secret..."
              if kubectl get secret bpdm-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret bpdm-postgres -n {{ .Release.Namespace }} -p "{\"stringData\":{\"password\":\"$BPDM_PG_PASSWORD\",\"postgres-password\":\"$BPDM_PG_PASSWORD\"}}"
                echo "bpdm-postgres updated successfully."
              else
                kubectl create secret generic bpdm-postgres -n {{ .Release.Namespace }} --from-literal=password=$BPDM_PG_PASSWORD --from-literal=postgres-password=$BPDM_PG_PASSWORD
                echo "bpdm-postgres created successfully."
              fi
              #############################################################################
              ##### issuer-postgresql
              ###### --- Script to update umbrella-issuer-postgres --- ######
              echo "Waiting for secret umbrella-issuer-postgres to exist..."
              while ! kubectl get secret umbrella-issuer-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Secret exists. Updating passwords..."
              POSTGRES_PASSWORD="$UMBRELLA_ISSUER_POSTGRES_PASSWORD"
              REPLICATION_PASSWORD="$UMBRELLA_ISSUER_REPLICATION_PASSWORD"

              kubectl patch secret umbrella-issuer-postgres \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"postgres-password\":\"$POSTGRES_PASSWORD\",
                      \"password\":\"$POSTGRES_PASSWORD\",
                      \"replication-password\":\"$REPLICATION_PASSWORD\"
                  }}"

              echo "umbrella-issuer-postgres secret updated successfully."

              #############################################################################
              ##### portal-backend-postgresql
              ##### --- Script to update portal-postgres secret --- #####
              echo "Waiting for secret portal-postgres to exist..."
                  while ! kubectl get secret portal-postgres -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                    echo "Secret portal-postgres not found yet. Waiting 5s..."
                    sleep 5
                  done

                  echo "Updating portal-postgres passwords..."
                  PORTAL_PASSWORD="$PORTAL_POSTGRES_PASSWORD"

                  kubectl patch secret portal-postgres \
                    -n {{ .Release.Namespace }} \
                    -p "{\"stringData\":{
                          \"postgres-password\":\"$PORTAL_PASSWORD\",
                          \"portal-password\":\"$PORTAL_PASSWORD\",
                          \"replication-password\":\"$PORTAL_PASSWORD\",
                          \"provisioning-password\":\"$PORTAL_PASSWORD\"
                        }}"

                  echo "portal-postgres secret updated successfully."
                
              #############################################################################
              ##### pgadmin4@
              ###### --- Script to update umbrella-pgadmin4 --- ######
              echo "Waiting for secret umbrella-pgadmin4 to exist..."
              while ! kubectl get secret umbrella-pgadmin4 -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret umbrella-pgadmin4 not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating umbrella-pgadmin4 passwords..."
              PGADMIN_PASSWORD="$PGADMIN_PASSWORD"

              kubectl patch secret umbrella-pgadmin4 \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"password\":\"$PGADMIN_PASSWORD\"
                    }}"

              echo "umbrella-pgadmin4 secret updated successfully."
            
              #############################################################################
              #####discoveryfinder-postgresql
              ######--- Script to update secret-discoveryfinder-postgres-init --- ######
              echo "Waiting for secret secret-discoveryfinder-postgres-init to exist..."
              while ! kubectl get secret secret-discoveryfinder-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating secret-discoveryfinder-postgres-init..."
              PASSWORD="$DISCOVERYFINDER_PASSWORD"

              kubectl patch secret secret-discoveryfinder-postgres-init \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"SPRING_DATASOURCE_PASSWORD\":\"$PASSWORD\",
                      \"password\":\"$PASSWORD\",
                      \"postgres-password\":\"$PASSWORD\"
                    }}"

              echo "secret-discoveryfinder-postgres-init updated successfully."

              #############################################################################
              ##### bpndiscovery-postgresql
              ###### --- Script to update secret-bpndiscovery-postgres-init  --- ######
              echo "Waiting for secret secret-bpndiscovery-postgres-init to exist..."
              while ! kubectl get secret secret-bpndiscovery-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; do
                echo "Secret not found yet. Waiting 5s..."
                sleep 5
              done

              echo "Updating secret-bpndiscovery-postgres-init..."
              PASSWORD_BPN="$BPNDISCOVERY_PASSWORD"

              kubectl patch secret secret-bpndiscovery-postgres-init \
                -n {{ .Release.Namespace }} \
                -p "{\"stringData\":{
                      \"SPRING_DATASOURCE_PASSWORD\":\"$PASSWORD_BPN\",
                      \"password\":\"$PASSWORD_BPN\",
                      \"postgres-password\":\"$PASSWORD_BPN\"
                    }}"

              echo "secret-bpndiscovery-postgres-init updated successfully."

              #############################################################################
              ##### dataprovider
              ###### --- Script to create or update umbrella-dataprovider-db --- ######
              echo "Checking/creating umbrella-dataprovider-db secret..."
              PASSWORD_DATAPROVIDER="$DATAPROVIDER_PASSWORD"

              if kubectl get secret umbrella-dataprovider-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataprovider-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATAPROVIDER\",
                        \"postgres-password\":\"$PASSWORD_DATAPROVIDER\"
                      }}"
                echo "umbrella-dataprovider-db updated successfully."
              else
                kubectl create secret generic umbrella-dataprovider-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATAPROVIDER \
                  --from-literal=postgres-password=$PASSWORD_DATAPROVIDER
                echo "umbrella-dataprovider-db created successfully."
              fi

              #############################################################################
              ##### dataconsumer-1-db
              ###### --- Script to create or update umbrella-dataconsumer-1-db --- ######
              echo "Checking/creating umbrella-dataconsumer-1-db secret..."
              PASSWORD_DATACONSUMER="$DATACONSUMER1_PASSWORD"

              if kubectl get secret umbrella-dataconsumer-1-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataconsumer-1-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATACONSUMER\",
                        \"postgres-password\":\"$PASSWORD_DATACONSUMER\"
                      }}"
                echo "umbrella-dataconsumer-1-db updated successfully."
              else
                kubectl create secret generic umbrella-dataconsumer-1-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATACONSUMER \
                  --from-literal=postgres-password=$PASSWORD_DATACONSUMER
                echo "umbrella-dataconsumer-1-db created successfully."
              fi

              #############################################################################
              ##### dataconsumer-2-db
              ###### --- Script to create or update umbrella-dataconsumer-2-db  --- ######
              echo "Checking/creating umbrella-dataconsumer-2-db secret..."
              PASSWORD_DATACONSUMER2="$DATACONSUMER2_PASSWORD"

              if kubectl get secret umbrella-dataconsumer-2-db -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-dataconsumer-2-db \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATACONSUMER2\",
                        \"postgres-password\":\"$PASSWORD_DATACONSUMER2\"
                      }}"
                echo "umbrella-dataconsumer-2-db updated successfully."
              else
                kubectl create secret generic umbrella-dataconsumer-2-db \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATACONSUMER2 \
                  --from-literal=postgres-password=$PASSWORD_DATACONSUMER2
                echo "umbrella-dataconsumer-2-db created successfully."
              fi

              #############################################################################
              ##### dataprovider-dtr
              ###### --- Script to create or update dataprovider-secret-dtr-postgres-init --- ######
              echo "Checking/creating dataprovider-secret-dtr-postgres-init..."
              PASSWORD_DATAPROVIDER_DTR="$DATAPROVIDER_DTR_PASSWORD"

              if kubectl get secret dataprovider-secret-dtr-postgres-init -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret dataprovider-secret-dtr-postgres-init \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"password\":\"$PASSWORD_DATAPROVIDER_DTR\",
                        \"postgres-password\":\"$PASSWORD_DATAPROVIDER_DTR\"
                      }}"
                echo "dataprovider-secret-dtr-postgres-init updated successfully."
              else
                kubectl create secret generic dataprovider-secret-dtr-postgres-init \
                  -n {{ .Release.Namespace }} \
                  --from-literal=password=$PASSWORD_DATAPROVIDER_DTR \
                  --from-literal=postgres-password=$PASSWORD_DATAPROVIDER_DTR
                echo "dataprovider-secret-dtr-postgres-init created successfully."
              fi

              #############################################################################
              ##### realmSeeding
              ###### --- Script to create or update umbrella-sharedidp-cx-operator-realm-seeding--- ######
              echo "Checking/creating umbrella-sharedidp-cx-operator-realm-seeding..."
              CX_CHANGE_PASSWORD="$CX_USER_PASSWORD"

              if kubectl get secret umbrella-sharedidp-cx-operator-realm-seeding -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                kubectl patch secret umbrella-sharedidp-cx-operator-realm-seeding \
                  -n {{ .Release.Namespace }} \
                  -p "{\"stringData\":{
                        \"initial-user-password\":\"$CX_CHANGE_PASSWORD\"
                      }}"
                echo "umbrella-sharedidp-cx-operator-realm-seeding updated successfully."
              else
                kubectl create secret generic umbrella-sharedidp-cx-operator-realm-seeding \
                  -n {{ .Release.Namespace }} \
                  --from-literal=initial-user-password=$CX_CHANGE_PASSWORD \
                echo "umbrella-sharedidp-cx-operator-realm-seeding created successfully."
              fi

              #############################################################################