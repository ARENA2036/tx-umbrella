# #############################################################################
# Automatic Deployment Process for Contruct-X
# #############################################################################
---
name: Deploy Construct-X for testing on Demo Cluster

on:
  push:
    branches: [ feature/contruct-x-cd ]
  pull_request:
    branches: [ feature/contruct-x-cd ]
    
  workflow_dispatch:
    inputs:
      cluster_context:
        description: "Select the environment e.g, (demo-cluster, arena2036-x-edc-cluster, arena2036-x-fed-services)"
        default: 'demo-cluster'
        required: false
        type: choice
        options:
          - demo-cluster
          # - arena2036-x-edc-cluster
          # - arena2036-x-fed-services
      resource_group:
        description: "Select resource group"
        default: 'demo'
        required: false
        type: choice
        options:
          - demo
          # - arena2036-x-edc
          # - arena2036-x-federated-services
      deployment_name:
        description: 'helm release name e.g, umbrella'
        default: 'umbrella'
        required: false
        type: string
      deployment_type:
        description: "Deployment action e.g, (install release, upgrade release, uninstall release)"
        default: 'install'
        required: false
        type: choice
        options:
          - install
          - upgrade
          - uninstall
      helm_values_file:
        description: 'Comma-separated list of Helm values files (relative paths: e.g, charts/umbrella/values.yaml,charts/umbrella/another-values.yaml)'
        default: 'charts/umbrella/values-aks-secrets-cd.yaml'
        required: false
        type: string
      namespace:
        description: 'Namespace to deploy the release'
        default: 'test-cd'
        required: false
        type: string
      rollback_on_failure:
        description: "Rollback release if deployment fails"
        required: false
        type: choice
        options:
          - 'true'
          - 'false'
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl
        run: |
          echo "Installing kubectl..."
          curl -LO -s "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          # Make it executable
          chmod +x kubectl
          # Move to a directory in your PATH
          sudo mv kubectl /usr/local/bin/
          # Verify installation
          kubectl version --client

      # -----------------------------
      # Connect Azure-AKS
      # -----------------------------
      # Test Mode
      - name: Connect Azure-AKS
        run: |
          # Hardcoded values for testing without workflow_dispatch
          CLUSTER="demo-cluster"
          RG="demo"
          echo "Connecting to AKS cluster: $CLUSTER in resource group: $RG"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az aks get-credentials --resource-group "$RG" --name "$CLUSTER" --overwrite-existing
    
      - name: Install Helm
        uses: azure/setup-helm@b7246b12e77f7134dc2d460a3d5bad15bbe29390 # v4.1.0
        with:
          version: v3.12.1
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Ensure Namespace Exists
      # -----------------------------
      # Test Mode
      - name: Ensure Namespace Exists
        if: github.event_name != 'workflow_dispatch'
        run: |
          NAMESPACE="test-cd"
          echo "Ensuring namespace exists: $NAMESPACE"
          kubectl get namespace "$NAMESPACE" || kubectl create namespace "$NAMESPACE"

      # -----------------------------
      # Deploy Release
      # -----------------------------
      # Test Mode
      - name: Deploy Release
        if: github.event_name != 'workflow_dispatch'
        env:
          SHAREDIDP_ADMIN_PASSWORD: ${{ secrets.SHAREDIDP_ADMIN_PASSWORD }}
          CENTRALIDP_ADMIN_PASSWORD: ${{ secrets.CENTRALIDP_ADMIN_PASSWORD }}
          SHAREDIDP_PG_PASSWORD: ${{ secrets.SHAREDIDP_PG_PASSWORD }}
          CENTRALIDP_PG_PASSWORD: ${{ secrets.CENTRALIDP_PG_PASSWORD }}
          BPDM_PG_PASSWORD: ${{ secrets.BPDM_PG_PASSWORD }}
          UMBRELLA_ISSUER_POSTGRES_PASSWORD: ${{ secrets.UMBRELLA_ISSUER_POSTGRES_PASSWORD }}
          UMBRELLA_ISSUER_REPLICATION_PASSWORD: ${{ secrets.UMBRELLA_ISSUER_REPLICATION_PASSWORD }}
          PORTAL_POSTGRES_PASSWORD: ${{ secrets.PORTAL_POSTGRES_PASSWORD }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          DISCOVERYFINDER_PASSWORD: ${{ secrets.DISCOVERYFINDER_PASSWORD }}
          BPNDISCOVERY_PASSWORD: ${{ secrets.BPNDISCOVERY_PASSWORD }}
          DATAPROVIDER_PASSWORD: ${{ secrets.DATAPROVIDER_PASSWORD }}
          DATACONSUMER1_PASSWORD: ${{ secrets.DATACONSUMER1_PASSWORD }}
          DATACONSUMER2_PASSWORD: ${{ secrets.DATACONSUMER2_PASSWORD }}
          DATAPROVIDER_DTR_PASSWORD: ${{ secrets.DATAPROVIDER_DTR_PASSWORD }}
          CX_USER_PASSWORD: ${{ secrets.CX_USER_PASSWORD }}
        run: |
          NAMESPACE="test-cd"
          RELEASE_NAME="umbrella"
          VALUE_FILES="charts/umbrella/values-aks-secrets-cd.yaml"
          ROLLBACK="true"
          # SECRETFILESPATH="charts/umbrella/templates/umbrella-secret.yaml"

          # Combine main values files and secret file
          # ALL_VALUES_FILES="$VALUE_FILES,$SECRETFILESPATH"


          # Build Helm values arguments
          HELM_VALUES_ARGS=""
          IFS=',' read -ra FILE_ARRAY <<< "$VALUE_FILES"
          for f in "${FILE_ARRAY[@]}"; do
            HELM_VALUES_ARGS="$HELM_VALUES_ARGS --values $f"
          done

          # Rollback/atomic option
          if [ "$ROLLBACK" = "true" ]; then
            EXTRA_ARGS="--atomic"
          else
            EXTRA_ARGS=""
          fi

          # Pass secrets using --set
          HELM_SET_ARGS=(
            --set secretEnv.SHAREDIDP_ADMIN_PASSWORD="$SHAREDIDP_ADMIN_PASSWORD"
            --set secretEnv.CENTRALIDP_ADMIN_PASSWORD="$CENTRALIDP_ADMIN_PASSWORD"
            --set secretEnv.SHAREDIDP_PG_PASSWORD="$SHAREDIDP_PG_PASSWORD"
            --set secretEnv.CENTRALIDP_PG_PASSWORD="$CENTRALIDP_PG_PASSWORD"
            --set secretEnv.BPDM_PG_PASSWORD="$BPDM_PG_PASSWORD"
            --set secretEnv.UMBRELLA_ISSUER_POSTGRES_PASSWORD="$UMBRELLA_ISSUER_POSTGRES_PASSWORD"
            --set secretEnv.UMBRELLA_ISSUER_REPLICATION_PASSWORD="$UMBRELLA_ISSUER_REPLICATION_PASSWORD"
            --set secretEnv.PORTAL_POSTGRES_PASSWORD="$PORTAL_POSTGRES_PASSWORD"
            --set secretEnv.PGADMIN_PASSWORD="$PGADMIN_PASSWORD"
            --set secretEnv.DISCOVERYFINDER_PASSWORD="$DISCOVERYFINDER_PASSWORD"
            --set secretEnv.BPNDISCOVERY_PASSWORD="$BPNDISCOVERY_PASSWORD"
            --set secretEnv.DATAPROVIDER_PASSWORD="$DATAPROVIDER_PASSWORD"
            --set secretEnv.DATACONSUMER1_PASSWORD="$DATACONSUMER1_PASSWORD"
            --set secretEnv.DATACONSUMER2_PASSWORD="$DATACONSUMER2_PASSWORD"
            --set secretEnv.DATAPROVIDER_DTR_PASSWORD="$DATAPROVIDER_DTR_PASSWORD"
            --set secretEnv.CX_USER_PASSWORD="$CX_USER_PASSWORD"
          )

          echo "Building Helm chart dependencies..."
          helm dependency build ./charts/umbrella
          
          echo "Deploying Umbrella release with secrets..."
          helm upgrade --install "$RELEASE_NAME" ./charts/umbrella \
            $HELM_VALUES_ARGS \
            "${HELM_SET_ARGS[@]}" \
            --namespace "$NAMESPACE" \
            $EXTRA_ARGS \
            --timeout 10m


          echo "Release deployed/upgraded: $RELEASE_NAME in namespace $NAMESPACE"