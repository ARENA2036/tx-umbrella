
# #############################################################################
# Automatic Deployment for Contruct-X
# #############################################################################
---
name: Deploy Construct-X

on:
  push:
    branches: [ feature/contruct-x-cd ]
  pull_request:
    branches: [ feature/contruct-x-cd ]
    
  workflow_dispatch:
    inputs:
      cluster_context:
        description: "Select the environment e.g, (demo-cluster, arena2036-x-edc-cluster, arena2036-x-fed-services)"
        default: 'demo-cluster'
        required: false
        type: choice
        options:
          - demo-cluster
          # - arena2036-x-edc-cluster
          # - arena2036-x-fed-services
      resource_group:
        description: "Select resource group"
        default: 'demo'
        required: false
        type: choice
        options:
          - demo
          # - arena2036-x-edc
          # - arena2036-x-federated-services
      deployment_name:
        description: 'helm release name e.g, umbrella'
        default: 'umbrella'
        required: false
        type: string
      deployment_type:
        description: "Deployment action e.g, (install release, upgrade release, uninstall release)"
        default: 'install'
        required: false
        type: choice
        options:
          - install
          - upgrade
          - uninstall
      helm_values_file:
        description: 'Comma-separated list of Helm values files (relative paths)'
        default: 'values.yaml'
        required: false
        type: string
      namespace:
        description: 'Namespace to deploy the release'
        default: 'test-flow'
        required: false
        type: string
      rollback_on_failure:
        description: "Rollback release if deployment fails"
        required: false
        type: choice
        options:
          - 'true'
          - 'false'
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl
        run: |
          echo "Installing kubectl..."
          curl -LO -s "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          # Make it executable
          chmod +x kubectl
          # Move to a directory in your PATH
          sudo mv kubectl /usr/local/bin/
          # Verify installation
          kubectl version --client
      
      # This script work for workflow dispatch 
      # - name: Connect Azure-AKS
      #   run: |
      #     # Set your azure subscription
      #     az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     az aks get-credentials --resource-group ${{ github.event.inputs.resource_group }} --name ${{ github.event.inputs.cluster_context }} --overwrite-existing

      # This is added for testing purpose  
      - name: Connect Azure-AKS
        run: |
          CLUSTER="${{ github.event.inputs.cluster_context }}"
          if [ -z "$CLUSTER" ]; then
            CLUSTER="demo-cluster"
          fi
          RG="${{ github.event.inputs.resource_group }}"
          if [ -z "$RG" ]; then
            RG="demo"
          fi
          echo "Connecting to AKS cluster: $CLUSTER in resource group: $RG"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az aks get-credentials --resource-group "$RG" --name "$CLUSTER" --overwrite-existing

    
      - name: Install Helm
        uses: azure/setup-helm@b7246b12e77f7134dc2d460a3d5bad15bbe29390 # v4.1.0
        with:
          version: v3.12.1
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply Umbrella Secrets
        env:
          SHAREDIDP_ADMIN_PASSWORD: ${{ secrets.SHAREDIDP_ADMIN_PASSWORD }}
          CENTRALIDP_ADMIN_PASSWORD: ${{ secrets.CENTRALIDP_ADMIN_PASSWORD }}
          SHAREDIDP_PG_PASSWORD: ${{ secrets.SHAREDIDP_PG_PASSWORD }}
          CENTRALIDP_PG_PASSWORD: ${{ secrets.CENTRALIDP_PG_PASSWORD }}
          BPDM_PG_PASSWORD: ${{ secrets.BPDM_PG_PASSWORD }}
          UMBRELLA_ISSUER_POSTGRES_PASSWORD: ${{ secrets.UMBRELLA_ISSUER_POSTGRES_PASSWORD }}
          UMBRELLA_ISSUER_REPLICATION_PASSWORD: ${{ secrets.UMBRELLA_ISSUER_REPLICATION_PASSWORD }}
          PORTAL_POSTGRES_PASSWORD: ${{ secrets.PORTAL_POSTGRES_PASSWORD }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          DISCOVERYFINDER_PASSWORD: ${{ secrets.DISCOVERYFINDER_PASSWORD }}
          BPNDISCOVERY_PASSWORD: ${{ secrets.BPNDISCOVERY_PASSWORD }}
          DATAPROVIDER_PASSWORD: ${{ secrets.DATAPROVIDER_PASSWORD }}
          DATACONSUMER1_PASSWORD: ${{ secrets.DATACONSUMER1_PASSWORD }}
          DATACONSUMER2_PASSWORD: ${{ secrets.DATACONSUMER2_PASSWORD }}
          DATAPROVIDER_DTR_PASSWORD: ${{ secrets.DATAPROVIDER_DTR_PASSWORD }}
          CX_USER_PASSWORD: ${{ secrets.CX_USER_PASSWORD }}
        run: |
          echo "Applying umbrella-secret.yaml..."
          kubectl apply -f umbrella-secret.yaml

      - name: Deploy Release
        run: |
          echo "Deploying Helm chart to cluster: ${{ github.event.inputs.cluster_context }}"
          NAMESPACE="${{ github.event.inputs.namespace }}"
          RELEASE_NAME="${{ github.event.inputs.deployment_name }}"
          FILES="${{ github.event.inputs.helm_values_file }}"
          ROLLBACK="${{ github.event.inputs.rollback_on_failure }}"

          # Ensure the namespace exists
          kubectl get namespace "$NAMESPACE" || kubectl create namespace "$NAMESPACE"

          # Build Helm values arguments for multiple files (comma-separated)
          HELM_VALUES_ARGS=""
          IFS=',' read -ra FILE_ARRAY <<< "$FILES"
          for f in "${FILE_ARRAY[@]}"; do
            HELM_VALUES_ARGS="$HELM_VALUES_ARGS --values $f"
          done

          # Handle rollback option
          if [ "$ROLLBACK" = "true" ]; then
            EXTRA_ARGS="--atomic"
          else
            EXTRA_ARGS=""
          fi

          # Decide Helm command based on deployment_type
          if [ "${{ github.event.inputs.deployment_type }}" = "install" ]; then
            echo "Installing release: $RELEASE_NAME"
            helm install "$RELEASE_NAME" ./helm --namespace "$NAMESPACE" $HELM_VALUES_ARGS

          elif [ "${{ github.event.inputs.deployment_type }}" = "upgrade" ]; then
            echo "Upgrading release: $RELEASE_NAME"
            helm upgrade --install "$RELEASE_NAME" ./helm --namespace "$NAMESPACE" $HELM_VALUES_ARGS $EXTRA_ARGS

          elif [ "${{ github.event.inputs.deployment_type }}" = "uninstall" ]; then
            echo "Uninstalling release: $RELEASE_NAME"
            helm uninstall "$RELEASE_NAME" --namespace "$NAMESPACE"

          else
            echo "Unknown deployment_type: ${{ github.event.inputs.deployment_type }}"
            exit 1
          fi
